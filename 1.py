from random import randint, choice
def handler(event, context):
    """
    Entry-point for Serverless Function.
    :param event: request payload.
    :param context: information about current execution context.
    :return: response to be serialized as JSON.
    """
    jointext = 'Добро пожаловать в "Шаг за шагом"! Независимо от того, являетесь ли Вы новичком или опытным учеником, моя миссия состоит в том, чтобы помочь Вам освоить новые навыки веселым и увлекательным способом. С моей помощью Вы сможете разбить сложные задачи на простые, понятные для выполнения шаги. От рисования и кулинарии до программирования и игре на гитаре - всему этому Вы можете научиться с помощью навыка "Шаг за шагом". Вместе мы будем изучать новые темы и полностью раскрывать Ваш потенциал.  Так давайте же начнем Ваш путь к успеху!\n\n\nЧем бы вы занялись в первую очередь?'
    fakts = {
        'buttonProgs': ({'text': 'Иногда программистам действительно полезно, встретив сложную задачу, отложить её до утра. Множество задач удавалось решить после всего лишь 20-минутного сна — по пробуждению решение приходило на ум само.','image_id': '1030494/8ab3afc93f1113286791'}, 
        {'text': 'Язык программирования Python назван не в честь питонов, хотя иконки файлов с написанными на нём скриптами или логотипы сред разработки часто представляют собой змеиную голову. Имя языку автор выбрал из-за того, что был поклонником скетч-сериала «Летающий цирк Монти Пайтона».','image_id': '937455/6322931d7f28bd66f652'}, 
        {'text': '«Отцом компьютера» считается Чарльз Беббидж. Он трудился над теорией функций и механизацией счета и создал первую цифровую машину. Назвал ее аналитической. Этот агрегат мог производить вычисления с точностью до двадцатого знака.','image_id': '1652229/a77a1a9b99a278b81319'}, 
        {'text': 'Интересно, что первым программистом в истории человечества была женщина. Её звали Ада Августа Байрон. Любовь к математике девушке привила мать еще с самого детства. Позже, Ада стала настоящим гением своего времени и посвятила свою жизнь науке.','image_id': '1030494/a655de1d97b546bc6d49'}),
        'buttonPaints': ({'text': 'Благодаря рисованию повышается концентрация внимания.\nМы живем в интересное время, и наше внимание постоянно разрывается между работой, домом и другими делами. Если вы сядете и сфокусируетесь на одной вещи, например на рисовании, то сможете улучшить свои способности к концентрации.','image_id': '1540737/bd86c6d78c11bdb5eff4'}, 
        {'text': 'Негативные мысли уйдут прочь.\nРисование — это то же самое, что и медитация. Когда вы рисуете, то фокусируетесь только на том, чем заняты, и благодаря этому вы снимаете с себя всё напряжение и дурные мысли.','image_id': '1656841/d19ce822366baed68f48'}, 
        {'text': 'Профессиональная взаимовыручка у художников – дело обычное. Так у известного пейзажиста Шишкина, который мог прорисовать на своих картинах каждую травинку и хвоинку, при создании картины «Утро в сосновом лесу» никак не получались медведи. Пришлось звать на подмогу коллегу и друга Константина Савицкого, который и стал автором мишек для известного шишкинского полотна.','image_id': '213044/df110db14103b092d2fe'}, 
        {'text': 'В 2006 году картина Джексона Полока «Номер 5, 1948» была продана на аукционе за $140 миллионов. При этом для создания картины и времени, и усилий было затрачено немного: Поллок всего лишь разливал краску по куску фибролита, разложенному на полу','image_id': '213044/68dab1348e90279b283e'}),
        'buttonBakers': ({'text': 'Во время своего африканского похода в обозе Наполеона Бонапарта из мясной провизии остались только куры. После нескольких недель питания куриным мясом, Наполеон пригрозил своему повару, что если завтра опять будет курица, то он лишится своей головы. Повару удалось так приготовить курицу, что император не смог понять, какое именно мясо он ест.','image_id': '1030494/4058802fa857fd05c83a'}, 
        {'text': 'В Японии считается, что суши, которые сделали специально для тебя теплые руки повара, и есть вкуснее руками. Кроме того, это уважение и похвала повару, особенно если суши были приготовлены у вас на глазах хозяином заведения. Этот обычай называется skinship, «контакт через кожу».','image_id': '997614/aa5f32ab414759b2e363'}, 
        {'text': 'Древние славяне полагали, что «праматерью» хлеба была каша, и объясняли это следующим образом. Варил как-то древний кулинар кашу и случайно насыпал крупы больше, чем полагалось. Вместо каши получилась лепешка. Соседи попробовали новое блюдо и, видимо, остались довольны, так как принялись за усовершенствования: вместо крупы со временем стали использовать муку.','image_id': '1030494/fe2eb07e0d4d0e8e6293'}, 
        {'text': 'Изысканное оформление для холодных блюд, десертов, прохладительных напитков — ледяные кубики с цветами: разложите в формы для льда цветки зверобоя, липы, смородины, калины, листья мяты, залейте теплой кипяченой водой и заморозьте.','image_id': '1030494/867fc7c512a47547ef62'}),
        'buttonGitars': ({'text': 'Мастера, которые создают гитары, называются лютье. Скорее всего, это название произошло от средневекового инструмента — лютни, которую считают прабабушкой современной гитары.','image_id': '213044/89cd5015e9cc351756ed'}, 
        {'text': 'Средневековая гитара имела всего 3-4 струны. Но все эти струны были двойными и для того, чтобы играть на них использовали медиатор, изготовленный из панциря черепахи.','image_id': '1652229/66ec831edd5d01cf14a7'}, 
        {'text': 'Шесть струн у гитары стали нормой аж к 18-му столетию. И только после этого их перестали складывать вдвое. Так гитара приобрела одинарные струны. Кстати, от этого звук не только не пострадал, но стал намного чище и фанатов у гитары после этого сразу же прибавилось.','image_id': '1030494/6a9899cf1a1d5f324923'}, 
        {'text': 'Первая электрогитара увидела Мир в 1931-м и своим внешним видом походила не на гитару, а на консервную банку (у нее был круглый металлический корпус), но Жорж Бошам и Адольф Рикенбекер все равно гордились своим детищем.','image_id': '1533899/f29c7995f042ddeec424'}),
    }
    infos = {
        'buttonInfoFrom': 'Вся информация взята из открытых источников и является общедоступной.',
        'buttonWhatCanLearn': 'На данный момент я могу предложить Вам научиться рисованию, программированию на языке Python, игре на гитаре и кулинарии.',
        'buttonCreaters': 'Telegram-аккаунты разработчиков: \nКапитан: @SubFear, \nГлавный сценарист: @t_e_n_s_i_d_e_r \nПрограммист: @InfernumVII'
    }

    videoLessons = {
'pr': {'easy': (
{'text': '''Введение в Python

В этом уроке вы узнаете, что такое Python, для чего его можно использовать и какие есть примеры популярных приложений на этом языке.
''', 'url': 'https://www.youtube.com/watch?v=kXfOWLLN9k4', 'image_id': '1540737/f11ef587cf4f44548b32'},

{'text': '''Ввод и вывод данных

В этом уроке вы научитесь работать с функцией print для вывода данных на экран и функцией input для ввода данных пользователем с клавиатуры.
''', 'url': 'https://www.youtube.com/watch?v=yuyq2BrHMJE', 'image_id': '1030494/6591abd5d24d5f3392bd'},

{'text':'''Типы данных

В этом уроке вы изучите различные типы данных, такие как числа, строки, списки, словари и кортежи. Вы также научитесь их использовать и изменять.
''', 'url': 'https://www.youtube.com/watch?v=bpASbXwjSp4', 'image_id': '1030494/88eee16ba38fd94141eb'}),
                       
               'medium': (
{'text': '''Условные операторы

В этом уроке вы узнаете, как использовать условные операторы if-else и if-elif-else для создания ветвлений в вашем коде.

Циклы

В этом уроке вы научитесь использовать циклы for и while для выполнения повторяющихся операций.''', 'url': 'https://www.youtube.com/watch?v=P0-jowMUwNk', 'image_id': '1652229/3ba217098739a01a5555'},
{'text': '''
Функции

В этом уроке вы узнаете, как создавать функции в Python, передавать аргументы в функции и возвращать значения.''', 'url': 'https://www.youtube.com/watch?v=DJAlfolEv9A', 'image_id': '213044/904a784e1707d6205e9a'},
{'text': '''
Работа с файлами

В этом уроке вы научитесь работать с файлами в Python, открывать, читать и записывать данные в файлы.''', 'url': 'https://www.youtube.com/watch?v=AJZ1xq9_caE', 'image_id': '997614/53b2348923c15b09dbc1'}
),

                'high': (
{'text': '''Создание классов и объектов

В этом уроке вы изучите, что такое классы и объекты в Python, как создавать их и использовать для описания объектов в вашем коде.''', 'url': 'https://www.youtube.com/watch?v=qcnOWSQAmOY', 'image_id': '1540737/0ae4fe67891404163514'},
{'text': '''
Работа с базами данных

В этом уроке вы научитесь работать с базами данных в Python, создавать, подключаться к ним, выполнять запросы и обновлять данные''', 'url': 'https://www.youtube.com/watch?v=fs7xrH2975U', 'image_id': '965417/ff407a2f33c5b5f98be3'},
{'text': '''
Работа с сетью

В этом уроке вы узнаете, как использовать библиотеки Python для работы с сетью, создавать сокеты, отправлять запросы и обрабатывать ответы.''', 'url': 'https://www.youtube.com/watch?v=UohnrnZZ0w0', 'image_id': '1030494/78402b8800613a8c2cb6'})
},

    'paint': {
        'easy': ({
'text': '''
Основы рисования

- Знакомство с инструментами: карандаши, маркеры, кисти и краски

- Основные правила пропорций: глаза, нос, рот, уши, лицо

- Упражнения на рисование основных фигур: кружки, квадраты, треугольники''', 'url': 'https://www.youtube.com/watch?v=jltEJF5cziU', 'image_id': '997614/7a98fe2fcb699662978c'},
{
'text': '''
Тени и свет

- Основы создания теней и света на рисунке

- Распределение света и тени в зависимости от источника света

- Упражнения на рисование объектов с использованием теней и света''', 'url': 'https://www.youtube.com/watch?v=UXIu8n1iT1Y', 'image_id': '1652229/da2571be37e5aaa128a8'},
{
'text': '''
Цветовое восприятие

- Знакомство с цветовым кругом и его основными характеристиками

- Сочетание цветов: основные правила и методики

- Упражнения на рисование объектов с использованием цветов''', 'url': 'https://www.youtube.com/watch?v=PrTGgcDJ2dI', 'image_id': '997614/6aa0dc9eb4bf943501df'}),
        'medium': (
{'text': '''Реалистичное рисование

- Особенности реалистичного рисования

- Использование техники карандашного мазка для создания объема в рисунке

- Упражнения на рисование реалистичных портретов и пейзажей''', 'url': 'https://www.youtube.com/watch?v=NzaJ2IfeggM', 'image_id': '1540737/ab4c21eca6b233728a8e'},
{'text': '''
Композиция

- Основы создания композиции на рисунке

- Размещение объектов на рисунке в зависимости от точки обзора

- Упражнения на создание композиции в различных стилях и жанрах''', 'url': 'https://www.youtube.com/watch?v=O0-ry1O19b8', 'image_id': '997614/54f840121f29513da296'},
{'text': '''
 Использование теней для создания объема

- Использование теней для создания объема

- Взаимодействие света и тени на образе

- Упражнения на создание рисунков с объемными объектами''', 'url': 'https://www.youtube.com/watch?v=pPwmhOFiTFQ', 'image_id': '1030494/0e07861738208b2da793'}
),

        'high': (
{'text': '''Техника акварели

- Знакомство с техникой акварели: основы создания картины с помощью красок

- Использование цветов на водной основе для создания насыщенной картины

- Упражнения на рисование в стиле акварели''', 'url': 'https://www.youtube.com/watch?v=B1sMM0EkjCg', 'image_id': '1533899/8279f635867b58d7a8b8'},
{'text': '''
Работа с техниками масла и акрила

- Знакомство с техниками масляной и акриловой живописи

- Особенности работы с масляными и акриловыми красками на холстах

- Упражнения на создание картины в стиле масла и акрила''', 'url': 'https://www.youtube.com/watch?v=EkE5g15qkkI', 'image_id': '1533899/23052dace1c56ee5105d'},
{'text': '''
Нестандартные материалы

- Использование нестандартных материалов для создания рисунков: гравюра, краски на стекле, картины из кожи и т.д.

- Особенности создания рисунков с использованием нестандартных материалов

- Упражнения на создание рисунков с нестандартными материалами.''', 'url': 'https://www.youtube.com/watch?v=s0q9KYXUXVI', 'image_id': '965417/4dbeb3bf8279f507e593'},)
        },
    'guitar': {
'easy': ({'text': '''
Основы игры на гитаре

- Знакомство с гитарой: названия частей гитары и их назначение

- Правильное положение рук и пальцев при игре на гитаре

- Настройка гитары- Основные аккорды: C, G, D, Em, Am
''', 'url': 'https://www.youtube.com/watch?v=L5wufzcZLxM', 'image_id': '937455/fd8289f76a4f005de208'}, 
{'text': '''
Ритмы и бой на гитаре

- Ритмические основы: счет, доли и такты

- Бой на гитаре: простой удар и акустический бой

- Упражнения на игру простых ритмов и боев
''', 'url': 'https://www.youtube.com/watch?v=1_70f1QttvU', 'image_id': '213044/96fb754309031f3d3119'}, 
{'text': '''
Игра с помощью табулатуры

- Знакомство с табулатурой: нотация для гитары

- Игра простых мелодий с помощью табулатуры
''', 'url': 'https://www.youtube.com/watch?v=dAwFAig0Nac', 'image_id': '1540737/04260fa11259bf7c16c4'}),

'medium' : ({'text': '''
Баррэ аккорды и баррэ техника

- Баррэ аккорды: что это и как их играть

- Баррэ техника: правильное положение пальцев для игры баррэ аккордов

- Игра аккордов на основе баррэ техники
''', 'url': 'https://www.youtube.com/watch?v=739OX5w6SJw', 'image_id': '937455/0e4254682b7199d70fdd'}, 
{'text': '''
Соло игра на гитаре

- Знакомство с техниками игры соло: глиссандо, легато, вибрато, смещение тона

- Упражнения на игру соло в стиле рока и блюза- Обзор шкал и их применение при игре соло
''', 'url': 'https://www.youtube.com/watch?v=4puwwcJdwbU', 'image_id': '1540737/27bd99f2b5c07542e767'}, 
{'text': '''
Игра на электрогитаре

- Работа с звуком: регулировка тембра и громкости

- Применение эффектов при игре на электрогитаре: дисторшн, задержка, хорус

- Игра рифов и соло на электрогитаре
''', 'url': 'https://www.youtube.com/watch?v=CmAG5KbcA5w', 'image_id': '997614/e0d8e288881101feb889'}),

'high': ({'text': '''
Игра в разных тональностях

- Знакомство с различными тональностями: мажор, минор, дорийский, лидийский и т.д.

- Игра на гитаре в разных тональностях

- Применение интервалов и аккордов в разных тональностях
''', 'url': 'https://www.youtube.com/watch?v=N4DQy95Suhg', 'image_id': '1030494/0d212dc95562594e00d4'}, 
{'text': '''
Игра с помощью педали фузз

- Знакомство с педалями фузз: что это и как она работает

- Использование педали фузз для создания различных звуковых эффектов

- Игра на гитаре с помощью педали фузз: исследование различных звуковых возможностей
''', 'url': 'https://www.youtube.com/watch?v=bMU2gGBJ5gs', 'image_id': '997614/4e4739567b55b2757d4f'}, 
{'text': '''
Игра в различных стилях

- Игра на гитаре в различных музыкальных стилях: рок, блюз, джаз, классика, фанк и т.д.

- Изучение различных техник игры в каждом стиле и их применение

- Создание собственного уникального стиля игры на гитаре
''', 'url': 'https://www.youtube.com/watch?v=ai29iW7-HVo', 'image_id': '997614/06ec7d4c6dcb567767c3'})
},

'cooking': {
'easy': ({'text': '''
Цель и намеревание готовки:
- мы будем говорить о том, что такое кулинария и ее цель.
''', 'url': 'https://www.youtube.com/watch?v=9QsefwpHRGI', 'image_id': '1652229/6386b5ac6c760fc7d3c9'}, 
{'text': '''
Что представляет собой поедание пищи:
''', 'url': 'https://www.youtube.com/watch?v=wSoFvJ56FZY', 'image_id': '1652229/2f14d08a3ecb42812ece'}, 
{'text': '''
Блюда мира:
-здесь мы рассмотрим несколько национальных блюд мира.
''', 'url': 'https://www.youtube.com/watch?v=VChp8_NrSds', 'image_id': '1030494/83201adefee4c52cfce0'}),

'medium' : ({'text': '''
Основы кулинарии

-Знакомство с кухонными инструментами: ножки, ложки и прочее.

-Основы кулинарных техник:
нарезка, жарка, тушение и прочее.
''', 'url': 'https://www.youtube.com/watch?v=qEfukbTycM0', 'image_id': '1533899/a28e5cc6e793a77ffa94'}, 
{'text': '''
Приготовление основных блюд:
-Пошаговое объяснение  по готовке блюд.
''', 'url': 'https://www.youtube.com/watch?v=mYEhP4n72nA', 'image_id': '965417/50f4c5e881f92b8cd3ae'}, 
{'text': '''
Приготовление ингредиентов домашнего консервирования

- Знакомство с техниками домашнего консервирования: маринование, засолка, сушка, вяление

- Освоение приемов приготовления консервов: помидоры, огурцы, перец, грибы

- Упражнения на домашнее консервирование
''', 'url': 'https://www.youtube.com/watch?v=jFOtcHsKt_k', 'image_id': '997614/3c933e0fea5048047a24'}),

'high': ({'text': '''
Использование нестандартных ингредиентов

- Изучение использования нестандартных ингредиентов: экзотические овощи и фрукты, необычные специи

- Освоение приемов приготовления блюд с использованием нестандартных ингредиентов

- Упражнения на приготовление блюд с нестандартными ингредиентами
''', 'url': 'https://www.youtube.com/watch?v=XJ5KAU_oyFg', 'image_id': '965417/ab24528f9e46830bd354'}, 
{'text': '''
Сложные техники приготовления

- Изучение сложных техник: приготовление пасты, блюд на пару, вакуумирование

- Усовершенствование навыков приготовления: работа с профессиональной кухонной техникой

- Упражнения на приготовление сложных блюд
''', 'url': 'https://www.youtube.com/watch?v=NaOR9yNLDRc', 'image_id': '997614/364b59b7cd7c6e824119'}, 
{'text': '''
Самостоятельное создание авторских блюд

- Создание собственных рецептов и блюд

- Работа над уникальным вкусом и оформлением блюд

- Упражнения на создание авторских блюд и меню.
''', 'url': 'https://www.youtube.com/watch?v=XwTPkcP-or8', 'image_id': '997614/9317dea796f3f0319c76'})
}
    }
    textLessons = {
        'pr':
        {'easy': (
            (
                {'text': '''
Добро пожаловать в урок введения в Python!

Python - это язык программирования, который был создан в 1991 году Гвидо ван Россумом. Это язык высокого уровня, который отличается от других языков тем, что он имеет простой синтаксис и легко читается.
Первый шаг, который нужно сделать, чтобы начать программирование на Python, это установить Python на свой компьютер. Вы можете скачать Python с официального сайта python.org. Следуйте инструкциям на сайте, чтобы установить Python.
''', 
                'tts': '''
Добро пожаловать в урок введения в Python!

Python - это язык программирования, который был создан в 1991 году Гвидо ван Россумом. Это язык высокого уровня, который отличается от других языков тем, что он имеет простой синтаксис и легко читается.
Первый шаг, который нужно сделать, чтобы начать программирование на Python, это установить Python на свой компьютер. Вы можете скачать Python с официального сайта python.org. Следуйте инструкциям на сайте, чтобы установить Python.
'''},
{'text': '''
Когда Python установлен, вы можете запустить интерпретатор Python. Это позволяет вам писать и выполнять код на Python. Попробуйте ввести следующую строку в свой интерпретатор Python:

```
print("Hello World!")
```

Это самый простой пример кода на Python. Он выводит фразу "Hello World!" на экран. Когда вы введете эту строку кода в интерпретатор Python и нажмете Enter, вы увидите "Hello World!" в выводе.
''', 
                'tts': '''
Когда Python установлен, вы можете запустить интерпретатор Python. Это позволяет вам писать и выполнять код на Python. Попробуйте ввести следующую строку в свой интерпретатор Python:
Это самый простой пример кода на Python. Он выводит фразу "Hello World!" на экран. Когда вы введете эту строку кода в интерпретатор Python и нажмете Enter, вы увидите "Hello World!" в выводе.
'''},
{'text': '''
Теперь попробуем создать переменную. Переменная - это имя, которое вы можете присвоить значению. В Python вы можете создать переменную, присвоив ей значение, используя знак "=".

```
message = "Hello World!"
print(message)
```

В этом примере мы создали переменную с именем "message" и присвоили ей значение "Hello World!". Затем мы напечатали значение переменной "message" при помощи команды "print".
''', 
                'tts': '''
Теперь попробуем создать переменную. Переменная - это имя, которое вы можете присвоить значению. В Python вы можете создать переменную, присвоив ей значение, используя знак "=".
В этом примере мы создали переменную с именем "message" и присвоили ей значение "Hello World!". Затем мы напечатали значение переменной "message" при помощи команды "print".
'''},
{'text': '''
Также вы можете использовать переменные для выполнения математических операций. Например:

```
x = 5
y = 3
print(x + y)
```

В этом примере мы создали две переменные - "x" и "y" - и присвоили им значения 5 и 3 соответственно. Затем мы сложили значения переменных и напечатали результат.

''', 
                'tts': '''
Также вы можете использовать переменные для выполнения математических операций. Например:
В этом примере мы создали две переменные - "x" и "y" - и присвоили им значения 5 и 3 соответственно. Затем мы сложили значения переменных и напечатали результат.
'''},
{'text': '''
Кроме того, в Python есть множество встроенных функций, которые вы можете использовать. Например, фунуция "len" возвращает длину строки или списка:

```
message = "Hello World!"
print(len(message))
```

В этом примере мы использовали функцию "len", чтобы определить длину строки "Hello World!" и напечатать результат.
''', 
                'tts': '''
Кроме того, в Python есть множество встроенных функций, которые вы можете использовать. Например, фунуция "len" возвращает длину строки или списка:
В этом примере мы использовали функцию "len", чтобы определить длину строки "Hello World!" и напечатать результат.
'''},
{'text': '''
Это было короткое введение в Python. В дальнейшем вы узнаете больше о функциях, операторах, условиях, циклах и многом другом, что делает Python таким мощным языком программирования.
''', 
                'tts': '''
Это было короткое введение в Python. В дальнейшем вы узнаете больше о функциях, операторах, условиях, циклах и многом другом, что делает Python таким мощным языком программирования.
'''}
            ),
            (
{'text': '''
Добро пожаловать на урок по вводу и выводу в Python!

Ввод и вывод (I/O) являются важными концепциями в программировании. Ввод - это процесс получения данных от пользователя или другой программы, а вывод - это процесс отправки данных пользователю или другой программе.

Python предлагает множество функций ввода/вывода, которые вы можете использовать для обмена данными с пользователем или другой
''', 
                'tts': '''
Добро пожаловать на урок по вводу и выводу в Python!

Ввод и вывод (I/O) являются важными концепциями в программировании. Ввод - это процесс получения данных от пользователя или другой программы, а вывод - это процесс отправки данных пользователю или другой программе.

Python предлагает множество функций ввода/вывода, которые вы можете использовать для обмена данными с пользователем или другой
'''},
{'text': '''
Функция "print" - это одна из самых часто используемых функций вывода. Она используется для вывода данных на экран.

```
print("Hello World!")
```

Эта команда выведет "Hello World!". Вы можете использовать эту функцию для вывода переменных, результатов математических операций и любых других данных, которые нужно вывести на экран.
''', 
                'tts': '''
Функция "print" - это одна из самых часто используемых функций вывода. Она используется для вывода данных на экран.
Эта команда выведет "Hello World!". Вы можете использовать эту функцию для вывода переменных, результатов математических операций и любых других данных, которые нужно вывести на экран.

'''},
{'text': '''
Теперь рассмотрим функцию ввода "input". Эта функция используется для получения данных от пользователя. Она приостанавливает выполнение программы, пока пользователь не введет данные и не нажмет клавишу Enter.

```
name = input("Введите имя: ")
print("Привет, " + name + "!")
```

Эта команда спросит у пользователя его имя и присвоит его переменной "name". Затем она выведет на экран сообщение "Привет, " и имя пользователя.
''', 
                'tts': '''
Теперь рассмотрим функцию ввода "input". Эта функция используется для получения данных от пользователя. Она приостанавливает выполнение программы, пока пользователь не введет данные и не нажмет клавишу Enter.
Эта команда спросит у пользователя его имя и присвоит его переменной "name". Затем она выведет на экран сообщение "Привет, " и имя пользователя.
'''},
{'text': '''
Также вы можете использовать форматирование строк для более гибкого вывода. Форматирование строк позволяет вам вставлять значения переменных внутрь строковых констант.

```
name = input("Введите имя: ")
print("Привет, {}!".format(name))
```

Эта команда использует метод форматирования строк "format", чтобы вставить значение переменной "name" внутрь строки "Привет, {}!". Затем эта команда выводит на экран сообщение "Привет, " и имя пользователя.
''', 
                'tts': '''
Также вы можете использовать форматирование строк для более гибкого вывода. Форматирование строк позволяет вам вставлять значения переменных внутрь строковых констант.
Эта команда использует метод форматирования строк "format", чтобы вставить значение переменной "name" внутрь строки "Привет, {}!". Затем эта команда выводит на экран сообщение "Привет, " и имя пользователя.
'''},
{'text': '''
Вы также можете использовать форматирование строк, используя символ %.

```
name = input("Введите имя: ")
print("Привет, %s!" % name)
```

Эта команда использует символ % для форматирования строки. Затем она выводит на экран сообщение "Привет, " и имя пользователя.
''', 
                'tts': '''
Вы также можете использовать форматирование строк, используя символ %.
Эта команда использует символ % для форматирования строки. Затем она выводит на экран сообщение "Привет, " и имя пользователя.
'''},
{'text': '''
В Python также есть возможность выводить данные в файлы. Для этого вы можете использовать команду "open", чтобы открыть файл для записи, и функцию "write", чтобы записать данные в файл.

```
with open("file.txt", "w") as f:
    f.write("Hello World!")
```

Эта команда открывает файл "file.txt" для записи и записывает в него строку "Hello World!".
''', 
                'tts': '''
В Python также есть возможность выводить данные в файлы. Для этого вы можете использовать команду "open", чтобы открыть файл для записи, и функцию "write", чтобы записать данные в файл.
Эта команда открывает файл "file.txt" для записи и записывает в него строку "Hello World!".
'''},
{'text': '''
В Python есть множество других функций ввода/вывода, которые вы можете использовать. Вы можете найти больше информации на официальном сайте Python и в его документации.

Это был короткий урок на тему ввода и вывода в Python. Спасибо за внимание!
''', 
                'tts': '''
В Python есть множество других функций ввода/вывода, которые вы можете использовать. Вы можете найти больше информации на официальном сайте Python и в его документации.
Это был короткий урок на тему ввода и вывода в Python. Спасибо за внимание!
'''}
            ),
            (
{'text': '''
Добро пожаловать на урок по типам данных в Python!

В Python есть несколько типов данных, которые вы можете использовать для хранения и обработки информации. Каждый тип данных имеет свои особенности, и поэтому важно понимать, какие типы данных существуют в Python и для чего они применяются.
''', 
                'tts': '''
Добро пожаловать на урок по типам данных в Python!

В Python есть несколько типов данных, которые вы можете использовать для хранения и обработки информации. Каждый тип данных имеет свои особенности, и поэтому важно понимать, какие типы данных существуют в Python и для чего они применяются.
'''},
{'text': '''
Python поддерживает несколько числовых типов данных, включая целые числа (int), числа с плавающей точкой (float) и комплексные числа (complex). Вы можете использовать числовые типы данных для выполнения математических операций, таких как сложение, вычитание, умножение и деление.

```
x = 10 # целое число
y = 1.5 # число с плавающей точкой
z = 3 + 5j # комплексное число
```
''', 
                'tts': '''
Python поддерживает несколько числовых типов данных, включая целые числа (int), числа с плавающей точкой (float) и комплексные числа (complex). Вы можете использовать числовые типы данных для выполнения математических операций, таких как сложение, вычитание, умножение и деление.
'''},
{'text': '''
Строки (str) являются последовательностями символов в Python. Вы можете использовать строки для хранения текстовой информации, такой как имена, фразы и т.д. Строки обозначаются кавычками, одинарными (' ') или двойными (" ").

```
name = "John" # строка
message = 'Hello, world!' # строка
```
''', 
                'tts': '''
Строки (str) являются последовательностями символов в Python. Вы можете использовать строки для хранения текстовой информации, такой как имена, фразы и т.д. Строки обозначаются кавычками, одинарными (' ') или двойными (" ").
'''},
{'text': '''
Логические (bool) типы данных могут иметь только два значения: True и False. Вы можете использовать логические типы данных для создания условных выражений и контроля логики программы.

```
x = True # логическое значение «истина»
y = False # логическое значение «ложь»
```
''', 
                'tts': '''
Логические (bool) типы данных могут иметь только два значения: True и False. Вы можете использовать логические типы данных для создания условных выражений и контроля логики программы.
'''},
{'text': '''
Списки (list) являются коллекциями элементов, которые могут быть разных типов данных. Списки могут быть изменяемыми, то есть вы можете добавлять, изменять и удалять элементы списков.

```
my_list = [1, "two", 3.0] # список
```
''', 
                'tts': '''
Списки (list) являются коллекциями элементов, которые могут быть разных типов данных. Списки могут быть изменяемыми, то есть вы можете добавлять, изменять и удалять элементы списков.
'''},
{'text': '''
Кортежи (tuple) очень похожи на списки, но неизменяемы. Это значит, что вы не можете добавлять, изменять и удалять элементы кортежей.

```
my_tuple = (1, "two", 3.0) # кортеж
```
''', 
                'tts': '''
Кортежи (tuple) очень похожи на списки, но неизменяемы. Это значит, что вы не можете добавлять, изменять и удалять элементы кортежей.
'''},
{'text': '''
Множества (set) являются коллекциями уникальных элементов, которые могут быть разных типов данных. Множества могут быть изменяемыми - вы можете добавлять и удалять элементы множества.

```
my_set = {1, "two", 3.0} # множество
```
''', 
                'tts': '''
Множества (set) являются коллекциями уникальных элементов, которые могут быть разных типов данных. Множества могут быть изменяемыми - вы можете добавлять и удалять элементы множества.
'''},
{'text': '''

Словари (dict) являются коллекциями пар ключ-значение, где ключи являются уникальными. Словари могут быть изменяемыми - вы можете добавлять, изменять и удалять элементы словаря.

```
my_dict = {'one': 1, 'two': 2, 'three': 3} # словарь
```
''', 
                'tts': '''

Словари (dict) являются коллекциями пар ключ-значение, где ключи являются уникальными. Словари могут быть изменяемыми - вы можете добавлять, изменять и удалять элементы словаря.
'''},
{'text': '''
Это был краткий обзор типов данных в Python. В Python также есть множество встроенных функций для работы с различными типами данных. Вы можете найти больше информации на официальном сайте Python и в его документации.

Спасибо за внимание!
''', 
                'tts': '''
Это был краткий обзор типов данных в Python. В Python также есть множество встроенных функций для работы с различными типами данных. Вы можете найти больше информации на официальном сайте Python и в его документации.
Спасибо за внимание!
'''}
            )
        ),
        'medium': (
            (
{'text': '''
Добро пожаловать на урок по условным операторам и циклам в Python!

Условные операторы и циклы - это важные концепции в программировании, позволяющие создавать более сложные программы.
''', 
                'tts': '''
Добро пожаловать на урок по условным операторам и циклам в Python!

Условные операторы и циклы - это важные концепции в программировании, позволяющие создавать более сложные программы.
'''},
{'text': '''
Условный оператор if позволяет выполнять блок кода только в случае, если определенное условие истинно.

```
x = 10
if x > 5:
    print("x больше 5")
```

В этом примере мы используем условный оператор if, чтобы проверить, является ли значение переменной "x" больше 5. Если это так, то мы выводим сообщение "x больше 5".
''', 
                'tts': '''
Условный оператор if позволяет выполнять блок кода только в случае, если определенное условие истинно.
В этом примере мы используем условный оператор if, чтобы проверить, является ли значение переменной "x" больше 5. Если это так, то мы выводим сообщение "x больше 5".
'''},
{'text': '''
Вы также можете использовать условный оператор if вместе с оператором else для выполнения разных блоков кода в зависимости от условия.

```
x = 3
if x > 5:
    print("x больше 5")
else:
    print("x меньше или равно 5")
```

В этом примере мы используем условный оператор if вместе с оператором else, чтобы проверить, является ли значение переменной "x" больше 5. Если это так, то мы выводим сообщение "x больше 5". Если это не так, то мы выводим сообщение "x меньше или равно 5".
''', 
                'tts': '''
Вы также можете использовать условный оператор if вместе с оператором else для выполнения разных блоков кода в зависимости от условия.
В этом примере мы используем условный оператор if вместе с оператором else, чтобы проверить, является ли значение переменной "x" больше 5. Если это так, то мы выводим сообщение "x больше 5". Если это не так, то мы выводим сообщение "x меньше или равно 5".
'''},
{'text': '''
Также вы можете использовать оператор elif для проверки нескольких условий.

```
x = 3
if x > 5:
    print("x больше 5")
elif x == 5:
    print("x равно 5")
else:
    print("x меньше 5")
```

В этом примере мы использовали оператор elif, чтобы проверить, равно ли значение переменной "x" 5. Если это так, то мы выводим сообщение "x равно 5". В противном случае мы проверяем, больше или меньше значения переменной "x" относительно 5.
''', 
                'tts': '''
Также вы можете использовать оператор elif для проверки нескольких условий.
В этом примере мы использовали оператор elif, чтобы проверить, равно ли значение переменной "x" 5. Если это так, то мы выводим сообщение "x равно 5". В противном случае мы проверяем, больше или меньше значения переменной "x" относительно 5.
'''},
{'text': '''
Циклы позволяют вам выполнять блок кода несколько раз.

Цикл while выполняет блок кода до тех пор, пока условие истинно.

```
i = 1
while i < 6:
    print(i)
    i += 1
```

В этом примере мы используем цикл while, чтобы напечатать числа от 1 до 5.

''', 
                'tts': '''
Циклы позволяют вам выполнять блок кода несколько раз.

Цикл while выполняет блок кода до тех пор, пока условие истинно.
В этом примере мы используем цикл while, чтобы напечатать числа от 1 до 5.

'''},
{'text': '''
Цикл for используется для перебора элементов в последовательности.

```
my_list = [1, 2, 3, 4, 5]
for i in my_list:
    print(i)
```

В этом примере мы используем цикл for для перебора элементов в списке и выводим каждый элемент на экран.

''', 
                'tts': '''
Цикл for используется для перебора элементов в последовательности.
В этом примере мы используем цикл for для перебора элементов в списке и выводим каждый элемент на экран.

'''},
{'text': '''
Цикл for также может использоваться с функцией range, чтобы выполнить блок кода определенное количество раз.

```
for i in range(5):
    print(i)
```

В этом примере мы используем цикл for с функцией range, чтобы напечатать числа от 0 до 4.

''', 
                'tts': '''
Цикл for также может использоваться с функцией range, чтобы выполнить блок кода определенное количество раз.
В этом примере мы используем цикл for с функцией range, чтобы напечатать числа от 0 до 4.

'''},
{'text': '''
Вы также можете использовать оператор break, чтобы остановить выполнение цикла в любой момент.

```
i = 1
while i < 6:
    print(i)
    if i == 3:
        break
    i += 1
```

В этом примере мы используем цикл while для напечатания чисел от 1 до 3. Когда значение переменной "i" достигает 3, мы используем оператор break, чтобы остановить выполнение цикла в этой точке.
''', 
                'tts': '''
Вы также можете использовать оператор break, чтобы остановить выполнение цикла в любой момент.
В этом примере мы используем цикл while для напечатания чисел от 1 до 3. Когда значение переменной "i" достигает 3, мы используем оператор break, чтобы остановить выполнение цикла в этой точке.
'''},
{'text': '''
Это был краткий обзор условных операторов и циклов в Python. В Python также есть множество встроенных функций для работы со строками, списками, словарями и другими типами данных. Вы можете найти больше информации на официальном сайте Python и в его документации.

Спасибо за внимание!
''', 
                'tts': '''
Это был краткий обзор условных операторов и циклов в Python. В Python также есть множество встроенных функций для работы со строками, списками, словарями и другими типами данных. Вы можете найти больше информации на официальном сайте Python и в его документации.

Спасибо за внимание!
'''}
            ),
            (
{'text': '''
Добро пожаловать на урок по функциям в Python!

Функции - это фрагменты кода, которые могут быть вызваны из любого места программы. Они могут принимать входные параметры и возвращать значения. Функции обычно используются для создания переиспользуемого кода, которые сокращают объем кода и уменьшают сложность программы.

''', 
                'tts': '''
Добро пожаловать на урок по функциям в Python!
Функции - это фрагменты кода, которые могут быть вызваны из любого места программы. Они могут принимать входные параметры и возвращать значения. Функции обычно используются для создания переиспользуемого кода, которые сокращают объем кода и уменьшают сложность программы.

'''},
{'text': '''
Создание функции в Python начинается с оператора def. Например, давайте создадим функцию, которая выводит приветствие на экран:

```
def hello():
    print("Hello there!")
```

Указываем имя функции (hello), затем используем круглые скобки, чтобы указать параметры функции (в данном случае их нет), а затем двоеточие, чтобы начать блок кода функции.

''', 
                'tts': '''
Создание функции в Python начинается с оператора def. Например, давайте создадим функцию, которая выводит приветствие на экран:
Указываем имя функции (hello), затем используем круглые скобки, чтобы указать параметры функции (в данном случае их нет), а затем двоеточие, чтобы начать блок кода функции.

'''},
{'text': '''
Функции могут принимать параметры. Например, давайте создадим функцию, которая принимает имя и выводит на экран приветствие с использованием этого имени:

```
def hello(name):
    print("Hello, " + name + "!")
```

Параметры могут быть нескольких типов, включая числа, строки, списки и т.д. Если функция принимает несколько параметров, они разделяются запятой.

''', 
                'tts': '''
Функции могут принимать параметры. Например, давайте создадим функцию, которая принимает имя и выводит на экран приветствие с использованием этого имени:
Параметры могут быть нескольких типов, включая числа, строки, списки и т.д. Если функция принимает несколько параметров, они разделяются запятой.

'''},
{'text': '''
Функция может возвращать значение при помощи оператора return. Например, давайте создадим функцию, которая возвращает квадрат числа:

```
def square(number):
    return number ** 2
```

Функция принимает один параметр number и возвращает значение его квадрата.
''', 
                'tts': '''
Функция может возвращать значение при помощи оператора return. Например, давайте создадим функцию, которая возвращает квадрат числа:
Функция принимает один параметр number и возвращает значение его квадрата.
'''},
{'text': '''
Функции вызываются по имени с помощью круглых скобок. Например, вызовем функцию hello, которую мы определили ранее:

```
hello("John")
```

Функция получит имя John в качестве параметра и выведет сообщение "Hello, John!".
''', 
                'tts': '''
Функции вызываются по имени с помощью круглых скобок. Например, вызовем функцию hello, которую мы определили ранее:
Функция получит имя John в качестве параметра и выведет сообщение "Hello, John!".
'''},
{'text': '''
Переменные, созданные внутри функции, называются локальными переменными. Они видны только внутри функции и не могут быть использованы где-то еще. Например, давайте создадим функцию, которая принимает два числа и возвращает их сумму:

```
def sum_numbers(a, b):
    result = a + b
    return result
```

Переменная result является локальной переменной, которая видна только внутри функции sum_numbers.
''', 
                'tts': '''
Переменные, созданные внутри функции, называются локальными переменными. Они видны только внутри функции и не могут быть использованы где-то еще. Например, давайте создадим функцию, которая принимает два числа и возвращает их сумму:
Переменная result является локальной переменной, которая видна только внутри функции sum_numbers.
'''},
{'text': '''
Переменные, созданные за пределами функции, называются глобальными переменными. Они могут быть использованы как внутри функции, так и за ее пределами. Например:

```
result = 0

def add_to_result(number):
    global result
    result = result + number
```

Переменная result создается за пределами функции add_to_result и является глобальной переменной. Внутри функции мы используем оператор global, чтобы указать на глобальную переменную.
''', 
                'tts': '''
Переменные, созданные за пределами функции, называются глобальными переменными. Они могут быть использованы как внутри функции, так и за ее пределами. Например:
Переменная result создается за пределами функции add_to_result и является глобальной переменной. Внутри функции мы используем оператор global, чтобы указать на глобальную переменную.
'''},
{'text': '''
Практические занятия

- Напишите функцию, которая принимает два числа и возвращает их произведение.
- Напишите функцию, которая принимает список чисел и возвращает сумму всех чисел в списке.
- Напишите функцию, которая принимает строку и возвращает ее в обратном порядке.
''', 
                'tts': '''
Практические занятия

- Напишите функцию, которая принимает два числа и возвращает их произведение.
- Напишите функцию, которая принимает список чисел и возвращает сумму всех чисел в списке.
- Напишите функцию, которая принимает строку и возвращает ее в обратном порядке.
'''}
            ),
            (
{'text': '''
В Python есть множество способов для работы с различными типами файлов. Это может быть текстовый файл, файл с изображением, аудиофайл и т.д. В этом уроке мы рассмотрим основные способы работы с файлами в Python.
''', 
                'tts': '''
В Python есть множество способов для работы с различными типами файлов. Это может быть текстовый файл, файл с изображением, аудиофайл и так далее. В этом уроке мы рассмотрим основные способы работы с файлами в Python.
'''},
{'text': '''
Первый шаг – это открытие файла. Для этого используется функция `open()`. Функция принимает два обязательных аргумента: имя файла и режим открытия файла. Режим открытия файла может быть "r" – для чтения файла, "w" – для записи в файл и "a" – для добавления данных в конец файла. Также можно указать режим текстового файла "t" или бинарного файла "b". Если режим не указывать, то по умолчанию файл будет открыт для чтения в текстовом режиме.

Пример открытия файла:

```python
file = open("file.txt", "r")
```
''', 
                'tts': '''
Первый шаг – это открытие файла. Для этого используется функция `open()`. Функция принимает два обязательных аргумента: имя файла и режим открытия файла. Режим открытия файла может быть "r" – для чтения файла, "w" – для записи в файл и "a" – для добавления данных в конец файла. Также можно указать режим текстового файла "t" или бинарного файла "b". Если режим не указывать, то по умолчанию файл будет открыт для чтения в текстовом режиме.

Пример открытия файла:
'''},
{'text': '''
После открытия файла, можно прочитать его содержимое. Для этого можно использовать методы `read()`, `readline()` или `readlines()`. Метод `read()` вернет всё содержимое файла строкой. Метод `readline()` вернет следующую строку файла, а метод `readlines()` вернет список всех строк в файле.

Пример чтения содержимого файла:

```python
# прочитать содержимое всего файла
content = file.read()

# прочитать следующую строку файла
line = file.readline()

# прочитать все строки файла в виде списка
lines = file.readlines()
```
''', 
                'tts': '''
После открытия файла, можно прочитать его содержимое. Для этого можно использовать методы `read()`, `readline()` или `readlines()`. Метод `read()` вернет всё содержимое файла строкой. Метод `readline()` вернет следующую строку файла, а метод `readlines()` вернет список всех строк в файле.

Пример чтения содержимого файла:

'''},
{'text': '''
Для записи в файл можно использовать метод `write()`. Этот метод принимает строку, которую нужно записать в файл. При этом, если в файле уже есть содержимое, то новые данные будут добавлены в конец файла.

Пример записи в файл:

```python
# открыть файл для записи
file = open("file.txt", "w")

# записать строку в файл
file.write("Hello, World! ")
file.write("This is a text file.")
```
''', 
                'tts': '''
Для записи в файл можно использовать метод `write()`. Этот метод принимает строку, которую нужно записать в файл. При этом, если в файле уже есть содержимое, то новые данные будут добавлены в конец файла.

Пример записи в файл:

'''},
{'text': '''
После того, как вы закончили работу с файлом, его нужно закрыть. Для этого можно использовать метод `close()`. Этот метод закрывает файл и освобождает все ресурсы, связанные с открытием файла.

Пример закрытия файла:

```python
# закрыть файл
file.close()
```
''', 
                'tts': '''
После того, как вы закончили работу с файлом, его нужно закрыть. Для этого можно использовать метод `close()`. Этот метод закрывает файл и освобождает все ресурсы, связанные с открытием файла.

Пример закрытия файла:
'''},
{'text': '''
При работе с файлами возможны ошибки, такие как отсутствие файла или отсутствие прав на чтение или запись. Для обработки таких ошибок мы можем использовать конструкцию try-except.

Пример обработки ошибок при работе с файлами:

```python
try:
    # открыть файл
    file = open("file.txt", "r")

    # прочитать содержимое файла
    content = file.read()

    # вывести содержимое файла
    print(content)

except IOError:
    print("Ошибка чтения файла")

finally:
    # закрыть файл
    file.close()
```
''', 
                'tts': '''
При работе с файлами возможны ошибки, такие как отсутствие файла или отсутствие прав на чтение или запись. Для обработки таких ошибок мы можем использовать конструкцию try-except.

Пример обработки ошибок при работе с файлами:
'''},
{'text': '''
Это был краткий обзор работы с файлами в Python. Чтобы стать опытным пользователем Python, вам необходимо углубляться в каждую тему более подробно.
''', 
                'tts': '''
Это был краткий обзор работы с файлами в Python. Чтобы стать опытным пользователем Python, вам необходимо углубляться в каждую тему более подробно.
'''}
            )
        ),
        'high': (
            (
{'text': '''
В Python класс – это абстрактный тип данных, который позволяет определять собственные типы данных и методы для работы с ними. Объект – это экземпляр класса, который имеет свои собственные атрибуты и методы.

В этом уроке мы рассмотрим основы работы с классами и объектами в Python.
''', 
                'tts': '''
В Python класс – это абстрактный тип данных, который позволяет определять собственные типы данных и методы для работы с ними. Объект – это экземпляр класса, который имеет свои собственные атрибуты и методы.

В этом уроке мы рассмотрим основы работы с классами и объектами в Python.
'''},
{'text': '''
Для создания класса в Python используется ключевое слово `class`. В классе можно определить атрибуты и методы, которые будут доступны объектам этого класса.

Пример создания класса:

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def get_name(self):
        return self.name

    def get_age(self):
        return self.age
```

В этом примере создается класс `Person`, который имеет атрибуты `name` и `age`, и методы `get_name()` и `get_age()`. Метод `__init__()` – это конструктор класса, который вызывается при создании нового объекта этого класса.
''', 
                'tts': '''
Для создания класса в Python используется ключевое слово `class`. В классе можно определить атрибуты и методы, которые будут доступны объектам этого класса.

Пример создания класса:
В этом примере создается класс `Person`, который имеет атрибуты `name` и `age`, и методы `get_name()` и `get_age()`. Метод `__init__()` – это конструктор класса, который вызывается при создании нового объекта этого класса.
'''},
{'text': '''
Для создания объекта класса необходимо вызвать его конструктор и передать нужные аргументы. Объект будет иметь свои собственные атрибуты и методы, но они будут определены в классе.

Пример создания объекта:

```python
# создание нового объекта класса Person
person1 = Person("Александр", 28)

# получение значения атрибутов объекта
print(person1.get_name()) # Александр
print(person1.get_age()) # 28
```
''', 
                'tts': '''
Для создания объекта класса необходимо вызвать его конструктор и передать нужные аргументы. Объект будет иметь свои собственные атрибуты и методы, но они будут определены в классе.

Пример создания объекта:
'''},
{'text': '''
Методы объекта – это функции, которые определены в классе и могут быть вызваны у объекта этого класса. В методах можно оперировать атрибутами объекта и возвращать результаты.

Пример методов объекта:

```python
class Dog:
    def __init__(self, name, breed, age):
        self.name = name
        self.breed = breed
        self.age = age

    def bark(self):
        return "Гав-гав!"

    def get_info(self):
        return f"Собака по имени {self.name} породы {self.breed}, возраст {self.age} лет."
```
''', 
                'tts': '''
Методы объекта – это функции, которые определены в классе и могут быть вызваны у объекта этого класса. В методах можно оперировать атрибутами объекта и возвращать результаты.

Пример методов объекта:
'''},
{'text': '''
В Python возможно наследование классов – создание нового класса на основе уже существующего. При этом, новый класс будет содержать все атрибуты и методы базового класса, но также может иметь собственные атрибуты и методы.

Пример наследования классов:

```python
class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Cat(Animal):
    def __init__(self, name, age, breed):
        super().__init__(name, age)
        self.breed = breed

    def meow(self):
        return "Мяу-мяу!"

cat1 = Cat("Барсик", 3, "Персидский")
print(cat1.name) # Барсик
print(cat1.breed) # Персидский
print(cat1.meow()) # Мяу-мяу!
```

В этом примере создается класс `Animal`, а затем создается класс `Cat`, который наследует все атрибуты и методы класса `Animal`. В классе `Cat` также определяются свои собственные атрибуты и методы.
''', 
                'tts': '''
В Python возможно наследование классов – создание нового класса на основе уже существующего. При этом, новый класс будет содержать все атрибуты и методы базового класса, но также может иметь собственные атрибуты и методы.

Пример наследования классов:
В этом примере создается класс `Animal`, а затем создается класс `Cat`, который наследует все атрибуты и методы класса `Animal`. В классе `Cat` также определяются свои собственные атрибуты и методы.
'''},
{'text': '''
Python автоматически удаляет объекты, которые больше не используются. Однако, если вы хотите явно удалить объект, то можно использовать функцию `del`.

Пример удаления объекта:

```python
person1 = Person("Александр", 28)
del person1
```
''', 
                'tts': '''
Python автоматически удаляет объекты, которые больше не используются. Однако, если вы хотите явно удалить объект, то можно использовать функцию `del`.

Пример удаления объекта:
'''},
{'text': '''
Это были основы работы с классами и объектами в Python. Чтобы стать опытным разработчиком, нужно углубляться в каждую тему более подробно.
''', 
                'tts': '''
Это были основы работы с классами и объектами в Python. Чтобы стать опытным разработчиком, нужно углубляться в каждую тему более подробно.
'''}
            ),
            (
{'text': '''
Python имеет множество модулей для работы с базами данных. В этом уроке мы рассмотрим основы работы с базами данных в Python с использованием модуля SQLite3.

SQLite3 – это легковесная реляционная база данных, которая может храниться в файле или памяти.
''', 
                'tts': '''
Python имеет множество модулей для работы с базами данных. В этом уроке мы рассмотрим основы работы с базами данных в Python с использованием модуля SQLite3.

SQLite3 – это легковесная реляционная база данных, которая может храниться в файле или памяти.

'''},
{'text': '''
Перед тем, как начать работать с базами данных в Python, нужно установить модуль SQLite3. Если вы используете Python версии 2.x, то вы можете использовать модуль sqlite3. Если вы используете Python версии 3.x, то модуль sqlite3 уже должен быть установлен.

```bash
pip install pysqlite3
```
''', 
                'tts': '''
Перед тем, как начать работать с базами данных в Python, нужно установить модуль SQLite3. Если вы используете Python версии 2.x, то вы можете использовать модуль sqlite3. Если вы используете Python версии 3.x, то модуль sqlite3 уже должен быть установлен.
'''},
{'text': '''
    Для начала работы с базой данных нужно создать её. Вы можете создать базу данных в программе или использовать уже существующую базу данных.

Пример создания базы данных и таблицы:

```python
import sqlite3

# подключиться к базе данных
conn = sqlite3.connect('example.db')

# создать таблицу
conn.execute('CREATE TABLE users
             (id INT PRIMARY KEY NOT NULL,
             name TEXT NOT NULL,
             age INT NOT NULL);')

# закрыть соединение с базой данных
conn.close()
```

В этом примере создается база данных `example.db` и таблица `users`, которая имеет три поля: `id`, `name` и `age`.

''', 
                'tts': '''
Для начала работы с базой данных нужно создать её. Вы можете создать базу данных в программе или использовать уже существующую базу данных.

Пример создания базы данных и таблицы:
В этом примере создается база данных `example.db` и таблица `users`, которая имеет три поля: `id`, `name` и `age`.

'''},
{'text': '''
После создания базы данных и таблицы можно вставлять данные в таблицу.

Пример вставки данных в таблицу:

```python
import sqlite3

# подключиться к базе данных
conn = sqlite3.connect('example.db')

# вставить данные в таблицу
conn.execute("INSERT INTO users (id, name, age) VALUES (1, 'John', 30)")
conn.execute("INSERT INTO users (id, name, age) VALUES (2, 'Mike', 25)")
conn.execute("INSERT INTO users (id, name, age) VALUES (3, 'Kate', 35)")

# сохранить изменения в базе данных
conn.commit()

# закрыть соединение с базой данных
conn.close()
```

В этом примере вставляются данные в таблицу `users`.
''', 
                'tts': '''
После создания базы данных и таблицы можно вставлять данные в таблицу.

Пример вставки данных в таблицу:
В этом примере вставляются данные в таблицу `users`.
'''},
{'text': '''
Чтобы выбрать данные из таблицы, можно использовать запрос SELECT.

Пример выборки данных из таблицы:

```python
import sqlite3

# подключиться к базе данных
conn = sqlite3.connect('example.db')

# выбрать данные из таблицы
cursor = conn.execute("SELECT id, name, age FROM users")
for row in cursor:
    print(f"id = {row[0]}, name = {row[1]}, age = {row[2]}")

# закрыть соединение с базой данных
conn.close()
```

В этом примере производится выборка всех данных из таблицы `users`.
''', 
                'tts': '''
Чтобы выбрать данные из таблицы, можно использовать запрос SELECT.

Пример выборки данных из таблицы:
В этом примере производится выборка всех данных из таблицы `users`.
'''},
{'text': '''
Для обновления данных в таблице нужно использовать запрос UPDATE.

Пример обновления данных в таблице:

```python
import sqlite3

# подключиться к базе данных
conn = sqlite3.connect('example.db')

# обновить данные в таблице
conn.execute("UPDATE users SET age = 40 WHERE id = 3")

# сохранить изменения в базе данных
conn.commit()

# закрыть соединение с базой данных
conn.close()
```

В этом примере обновляются данные в таблице `users`.

''', 
                'tts': '''
Для обновления данных в таблице нужно использовать запрос UPDATE.

Пример обновления данных в таблице:
В этом примере обновляются данные в таблице `users`.

'''},
{'text': '''
Для удаления данных из таблицы нужно использовать запрос DELETE.

Пример удаления данных из таблицы:

```python
import sqlite3

# подключиться к базе данных
conn = sqlite3.connect('example.db')

# удалить данные из таблицы
conn.execute("DELETE FROM users WHERE id = 2")

# сохранить изменения в базе данных
conn.commit()

# закрыть соединение с базой данных
conn.close()
```

В этом примере удаляются данные из таблицы `users`.
''', 
                'tts': '''
Для удаления данных из таблицы нужно использовать запрос DELETE.

Пример удаления данных из таблицы:
В этом примере удаляются данные из таблицы `users`.
'''},
{'text': '''
Это были основы работы с базами данных в Python с использованием модуля SQLite3. Чтобы стать опытным разработчиком, нужно углубляться в каждую тему более подробно.
''', 
                'tts': '''
Это были основы работы с базами данных в Python с использованием модуля SQLite3. Чтобы стать опытным разработчиком, нужно углубляться в каждую тему более подробно.
'''}
            ),
            (
{'text': '''
Python предоставляет множество модулей для работы с сетью. В этом уроке мы рассмотрим основы работы с сетью в Python с использованием модуля `socket`.

Socket – это стандартный модуль Python, который позволяет создавать сокеты и работать с различными протоколами связи.
''', 
                'tts': '''
Python предоставляет множество модулей для работы с сетью. В этом уроке мы рассмотрим основы работы с сетью в Python с использованием модуля `socket`.

Socket – это стандартный модуль Python, который позволяет создавать сокеты и работать с различными протоколами связи.
'''},
{'text': '''
Для создания сервера можно использовать класс `socket` из модуля `socket`. Класс `socket` позволяет создать сокет, который будет слушать на определенном порту.

Пример создания сервера:

```python
import socket

# создание сокета
s = socket.socket()

# привязка сокета к IP-адресу и порту
s.bind(('localhost', 8888))

# слушание порта
s.listen(5)

# ожидание подключения клиента
while True:
    client, address = s.accept()

    # обработка запроса от клиента
    data = client.recv(1024)
    response = "Привет, клиент!"
    client.send(response.encode())

    # закрытие соединения
    client.close()
```

В этом примере создается сервер, который слушает на порту 8888. После создания сервер начинает ожидать подключения клиентов. При подключении клиента, сервер получает его запрос, обрабатывает его и возвращает ответ.

''', 
                'tts': '''
Для создания сервера можно использовать класс `socket` из модуля `socket`. Класс `socket` позволяет создать сокет, который будет слушать на определенном порту.

Пример создания сервера:
В этом примере создается сервер, который слушает на порту 8888. После создания сервер начинает ожидать подключения клиентов. При подключении клиента, сервер получает его запрос, обрабатывает его и возвращает ответ.
'''},
{'text': '''
Для создания клиента нужно создать сокет, который будет подключаться к серверу на определенном порту.

Пример создания клиента:

```python
import socket

# создание сокета
s = socket.socket()

# подключение к серверу
s.connect(('localhost', 8888))

# отправка запроса на сервер
data = "Привет, сервер!"
s.send(data.encode())

# получение ответа от сервера
response = s.recv(1024)
print(response.decode())

# закрытие соединения
s.close()
```

В этом примере создается клиент, который подключается к серверу на порту 8888 и отправляет ему запрос. После отправки запроса клиент получает ответ от сервера и закрывает соединение.
''', 
                'tts': '''
Для создания клиента нужно создать сокет, который будет подключаться к серверу на определенном порту.
В этом примере создается клиент, который подключается к серверу на порту 8888 и отправляет ему запрос. После отправки запроса клиент получает ответ от сервера и закрывает соединение.
'''},
{'text': '''
Python также предоставляет модуль `http.client` для работы с HTTP-запросами и ответами. С помощью этого модуля вы можете отправлять HTTP-запросы на сервер и получать ответы.

Пример отправки HTTP-запроса:

```python
import http.client

# создать соединение с сервером
conn = http.client.HTTPSConnection("jsonplaceholder.typicode.com")

# отправить запрос
conn.request("GET", "/todos/1")

# получить ответ
response = conn.getresponse()
data = response.read()

print(data.decode())

# закрыть соединение
conn.close()
```

В этом примере создается HTTP-запрос к серверу `jsonplaceholder.typicode.com` на эндпоинт `/todos/1`. После отправки запроса клиент получает ответ от сервера.
''', 
                'tts': '''
Python также предоставляет модуль `http.client` для работы с HTTP-запросами и ответами. С помощью этого модуля вы можете отправлять HTTP-запросы на сервер и получать ответы.

Пример отправки HTTP-запроса:
В этом примере создается HTTP-запрос к серверу `jsonplaceholder.typicode.com` на эндпоинт `/todos/1`. После отправки запроса клиент получает ответ от сервера.
'''},
{'text': '''
Это были основы работы с сетью в Python. Для работы с сетью вам может потребоваться использовать другие модули Python, в зависимости от ваших потребностей.
''', 
                'tts': '''
Это были основы работы с сетью в Python. Для работы с сетью вам может потребоваться использовать другие модули Python, в зависимости от ваших потребностей.
'''},
            )
        )},

        'paint':
        {'easy': (
            (
                {'text': '''Начнем с круга. Сначала будет сложно нарисовать ровный красивый круг, поэтому поможем себе с помощью циркуля. Легкой линией нарисуем окружность и обведем ее. Один раз, потом еще, запоминаем характер движения и пытаемся воспроизвести. Можно помогать себе проставив несколько точек для начала. Со временем, если выполнять это упражнение, круги будут получаться все лучше и краше.''', 
                'tts': '''Начнем с круга. Сначала будет сложно нарисовать ровный красивый круг, поэтому поможем себе с помощью циркуля. Легкой линией нарисуем окружность и обведем ее. Один раз, потом еще, запоминаем характер движения и пытаемся воспроизвести. Можно помогать себе проставив несколько точек для начала.'''},
                {'text': '''Далее, квадрат. Да, сложно с первого раза нарисовать все стороны одинаковыми и все углы 90 градусов. Поэтому, чтобы запомнить правильную форму используем линейку. Потом рисуем по точкам, а потом самостоятельно, без вспомогательных инструментов.''', 
                'tts': '''Далее, квадрат. Да, сложно с первого раза нарисовать все стороны одинаковыми и все углы 90 градусов. Поэтому, чтобы запомнить правильную форму используем линейку. Потом рисуем по точкам, а потом самостоятельно, без вспомогательных инструментов.'''},
                {'text': '''После квадрата рисуем ромб, то есть тот же квадрат, но повернутый на 45 градусов.''',
                'tts': '''После квадрата рисуем ромб, то есть тот же квадрат, но повернутый на 45 градусов.'''},
                {'text': '''Отличная работа! Теперь давайте нарисуем яйцо. Это овал, который на одном конце уже, чем на другом.''',
                'tts': '''Отличная работа! Теперь давайте нарисуем яйцо. Это овал, который на одном конце уже, чем на другом.'''},
                {'text': '''Следующий полумесяц. Эту фигуру нарисовать не так просто, как может показаться на первый взгляд. Сначала попробуйте нарисовать его самостоятельно, а потом уже при помощи циркуля, помня, что месяц это фактически часть двух пересекающихся окружностей.''',
                'tts': '''Следующий полумесяц. Эту фигуру нарисовать не так просто, как может показаться на первый взгляд. Сначала попробуйте нарисовать его самостоятельно, а потом уже при помощи циркуля, помня, что месяц это фактически часть двух пересекающихся окружностей.'''},
                {'text': '''И, наконец, переходим к трёхмерным фигурам. Нарисуем куб. Рисуем квадрат, потом еще один квадрат чуть выше и правее, соединяем углы ровными линиями. Получаем прозрачный куб. Теперь попробуем нарисовать тот же куб, но уже без видимых линий внутри Надеюсь, что у тебя получилось нарисовать несколько геометрических фигур. Спасибо за прохождение первого урока по рисованию!!''',
                'tts': '''И, наконец, переходим к трёхмерным фигурам. Нарисуем куб. Рисуем квадрат, потом еще один квадрат чуть выше и правее, соединяем углы ровными линиями. Теперь попробуем нарисовать тот же куб, но уже без видимых линий внутри Надеюсь, что у тебя получилось нарисовать несколько геометрических фигур. Спасибо за прохождение первого урока по рисованию, ты молодец!!'''},
            ),
            (
                {'text': '''Тень и свет являются важными элементами в создании объемной и реалистичной картинки. Начнём с того, что вам нужно определить источник света. Перед тем как начать рисовать, нужно решить, откуда будет исходить свет. Это позволит определить, какая часть предмета будет находиться в полной тени, а какая - в свету. Вы можете выбрать для этого любой источник света, например, окно, лампочку, солнце и другое.''',
                'tts': '''Тень и свет являются важными элементами в создании объемной и реалистичной картинки. Перед тем как начать рисовать, нужно решить, откуда будет исходить свет. Это позволит определить, какая часть предмета будет находиться в полной тени, а какая - в свету. Вы можете выбрать для этого любой источник света, например, окно, лампочку, солнце и другое.'''},
                {'text': '''Теперь поместите объект, который собираетесь рисовать, на видное место под падающим светом. Не забывайте, что различные предметы могут отражать свет по-разному, поэтому важно выбрать правильный угол обзора.''',
                'tts': '''Теперь поместите объект, который собираетесь рисовать, на видное место под падающим светом. Не забывайте, что различные предметы могут отражать свет по-разному, поэтому важно выбрать правильный угол обзора.'''},
                {'text': '''Далее нарисуйте тени, пусть они будут мягкими и реалистичными. Чем ближе объект к поверхности или источнику света, тем более резкая и темная будет его тень. Если тень уходит вдаль, то она становится мягче.''',
                'tts': '''Далее нарисуйте тени, пусть они будут мягкими и реалистичными. Чем ближе объект к поверхности или источнику света, тем более резкая и темная будет его тень. Если тень уходит вдаль, то она становится мягче.'''},
                {'text': '''Перейдём к отображению света на объекте. Если свет идет сверху, то верхняя часть объекта будет находиться в свете, а нижняя - в тени. Если свет идет снизу, то наоборот.''',
                'tts': '''Перейдём к отображению света на объекте. Если свет идет сверху, то верхняя часть объекта будет находиться в свете, а нижняя - в тени. Если свет идет снизу, то наоборот.'''},
                {'text': '''Наконец, создайте гладкий переход от света к тени на объекте с помощью градиента. Чем больше разница между светом и тенью, тем сильнее заметен переход. Также учтите, что в зависимости от материала, из которого сделан предмет, он может отражать свет по-разному и иметь свои оттенки и цвета. Так держать, ты завершил средний уровень по рисованию!''',
                'tts': '''Наконец, создайте гладкий переход от света к тени на объекте с помощью градиента. Чем больше разница между светом и тенью, тем сильнее заметен переход. Также учтите, что в зависимости от материала, из которого сделан предмет, он может отражать свет по-разному и иметь свои оттенки и цвета. Так держать, ты завершил средний уровень по рисованию!'''}
                

            ),
            (
                {'text': '''Для понимания цветового восприятия нужно начать с понимания цветового круга. Он состоит из трех основных цветов — красного, синего и желтого — и трех вторичных цветов — зеленого, фиолетового и оранжевого, которые образуются при смешении основных цветов. Цветовой круг может использоваться для создания гармоничных комбинаций цветов или для указания комплиментарных (противоположных) цветов''',
                'tts': '''Для понимания цветового восприятия нужно начать с понимания цветового круга. Он состоит из трех основных цветов — красного, синего и желтого — и трех вторичных цветов — зеленого, фиолетового и оранжевого, которые образуются при смешении основных цветов. Цветовой круг может использоваться для создания гармоничных комбинаций цветов или для указания комплиментарных (противоположных) цветов'''},
                {'text': '''Цвета распределяются по спектру на видимой нами шкале, который идет от красного к фиолетовому. Каждый цвет имеет свою длину волны, которая определяет его восприятие.''',
                'tts': '''Цвета распределяются по спектру на видимой нами шкале, который идет от красного к фиолетовому. Каждый цвет имеет свою длину волны, которая определяет его восприятие.'''},
                {'text': '''Существуют различные цветовые схемы, которые можно использовать в дизайне и искусстве. Например, монохромная схема использует один цвет с различными оттенками, тонами и оттенками. Комплиментарная схема использует противоположные цвета на цветовом круге, чтобы создать контраст и выделить элементы. Аналоговая схема использует близкие цвета на цветовом круге для создания гармонии и согласованности.''',
                'tts': '''Существуют различные цветовые схемы, которые можно использовать в дизайне и искусстве. Например, монохромная схема использует один цвет с различными оттенками, тонами и оттенками. Комплиментарная схема использует противоположные цвета на цветовом круге, чтобы создать контраст и выделить элементы. Аналоговая схема использует близкие цвета на цветовом круге для создания гармонии и согласованности.'''},
                {'text': '''Цвет может изменяться в зависимости от своего окружения. Например, цвет может выглядеть более насыщенным на белом фоне, чем на черном или на зеленом листе, чем на белой странице.''',
                'tts': '''Цвет может изменяться в зависимости от своего окружения. Например, цвет может выглядеть более насыщенным на белом фоне, чем на черном или на зеленом листе, чем на белой странице.'''},
                {'text': '''Цвета могут иметь психологическое воздействие на человека. Например, красный может вызывать чувство страха, а синий - чувство спокойствия. При создании дизайна или искусства важно выбирать цвета, которые подходят для передачи определенных эмоций или ощущений.''',
                'tts': '''Цвета могут иметь психологическое воздействие на человека. Например, красный может вызывать чувство страха, а синий - чувство спокойствия. При создании дизайна или искусства важно выбирать цвета, которые подходят для передачи определенных эмоций или ощущений.'''},
            ),
        ),
        'medium': (
            (
                {'text': '''Первым шагом к реалистичному рисованию объекта является изучение образцов. Найдите фотографии, инструкции и общую информацию об объекте, который вы собираетесь нарисовать. Это позволит вам изучить форму, текстуру, свет и теню и другие важные детали объекта.''',
                'tts': '''Первым шагом к реалистичному рисованию объекта является изучение образцов. Найдите фотографии, инструкции и общую информацию об объекте, который вы собираетесь нарисовать. Это позволит вам изучить форму, текстуру, свет и теню и другие важные детали объекта.'''},
                {'text': '''Создание сплетенной сетки поможет вам сохранить пропорции и размер объекта. Разделите образец на сетку из квадратов или нарисуйте общую структуру объекта, используя осевые линии. Это поможет вам сохранить размеры и форму объекта, на который вы собираетесь нарисовать.''',
                'tts': '''Создание сплетенной сетки поможет вам сохранить пропорции и размер объекта. Разделите образец на сетку из квадратов или нарисуйте общую структуру объекта, используя осевые линии. Это поможет вам сохранить размеры и форму объекта, на который вы собираетесь нарисовать.'''},
                {'text': '''Следование правилам перспективы является ключевым элементом реалистичного рисования. Учитывайте, что объекты вдали от нас будут меньше по размеру, и объекты, находящиеся ближе, будут больше. Используйте перспективу линейного и точечного типа для создания объемной картины.''',
                'tts': '''Следование правилам перспективы является ключевым элементом реалистичного рисования. Учитывайте, что объекты вдали от нас будут меньше по размеру, и объекты, находящиеся ближе, будут больше. Используйте перспективу линейного и точечного типа для создания объемной картины.'''},
                {'text': '''Выбор материалов для работы является важным элементом реалистичного рисования. Карандаши могут быть использованы для создания очень детализированных и реалистичных штрихов, а акварель может помочь создать гладкие и мягкие текстуры. Попробуйте разные материалы и выберите тот, который лучше подходит для вашего стиля и объекта.''',
                'tts': '''Выбор материалов для работы является важным элементом реалистичного рисования. Карандаши могут быть использованы для создания очень детализированных и реалистичных штрихов, а акварель может помочь создать гладкие и мягкие текстуры. Попробуйте разные материалы и выберите тот, который лучше подходит для вашего стиля и объекта.'''},
                {'text': '''Для добавления дополнительных деталей в вашу работу используйте тонкую линию или более светлый или темный оттенок цвета, чтобы выделить определенные элементы объекта.''',
                'tts': '''Для добавления дополнительных деталей в вашу работу используйте тонкую линию или более светлый или темный оттенок цвета, чтобы выделить определенные элементы объекта.'''},
                {'text': '''Когда вы рисуете, начинайте с общего определения формы и затем постепенно добавляйте более детальное изображение объекта. Почти каждый объект может быть разделен на несколько частей, и каждая часть может быть доведена до совершенства, что является важным элементом в создании реалистичной картины.''',
                'tts': '''Когда вы рисуете, начинайте с общего определения формы и затем постепенно добавляйте более детальное изображение объекта. Почти каждый объект может быть разделен на несколько частей, и каждая часть может быть доведена до совершенства, что является важным элементом в создании реалистичной картины.'''},
                
            ),
            (
                {'text': '''Начнём с того, что композиция - это способ упорядочивания элементов в художественном произведении, фотографии или рисунке. Ее цель - создать гармоничное и эстетически привлекательное изображение.''',
                'tts': '''Начнём с того, что композиция - это способ упорядочивания элементов в художественном произведении, фотографии или рисунке. Ее цель - создать гармоничное и эстетически привлекательное изображение.'''},
                {'text': '''Правила композиции:
1. Линии взгляда: главные элементы должны находиться на линиях взгляда, чтобы привлечь внимание зрителя.
2. Симметрия: симметричное расположение элементов может создавать баланс и гармонию.
3. Баланс: элементы должны быть расположены так, чтобы не было перегрузки ни на одной стороне.
4. Фокусировка: элементы, которые вы хотите выделить, должны быть более яркими, контрастными или большими, чем остальные.''',
                'tts': '''Правила композиции:
Линии взгляда: главные элементы должны находиться на линиях взгляда, чтобы привлечь внимание зрителя.
Симметрия: симметричное расположение элементов может создавать баланс и гармонию.
Баланс: элементы должны быть расположены так, чтобы не было перегрузки ни на одной стороне.
Фокусировка: элементы, которые вы хотите выделить, должны быть более яркими, контрастными или большими, чем остальные.'''},
            ),
            (
                {'text': '''Тени являются важным элементом в рисовании, который может добавить глубину и объем в ваше изображение. В этом уроке мы рассмотрим, как использовать тени для создания объема в рисовании.
                ''', 
                'tts': '''Тени являются важным элементом в рисовании, который может добавить глубину и объем в ваше изображение. В этом уроке мы рассмотрим, как использовать тени для создания объема в рисовании.
                '''},
                {'text': '''Шаг 1: Определите источник света
                Прежде всего, нужно определить, откуда исходит свет в вашем изображении. Это может быть окно, лампа или другой источник света. Определите в какой точке находится источник света и на какие объекты падает свет.
                Шаг 2: Определите тени
                Определите, где находятся тени на объектах вашего изображения. Объекты ближе к источнику света будут иметь меньше теней, а объекты дальше будут иметь больше теней.
                Шаг 3: Нанесите тени
                Нанесите тени на объекты вашего изображения, используя темные оттенки. Тени должны быть острыми у источника света и плавно переходить в более или менее темные оттенки на дальних объектах.
                ''', 
                'tts': '''Шаг 1: Определите источник света
                Прежде всего, нужно определить, откуда исходит свет в вашем изображении. Это может быть окно, лампа или другой источник света. Определите в какой точке находится источник света и на какие объекты падает свет.
                Шаг 2: Определите тени
                Определите, где находятся тени на объектах вашего изображения. Объекты ближе к источнику света будут иметь меньше теней, а объекты дальше будут иметь больше теней.
                Шаг 3: Нанесите тени
                Нанесите тени на объекты вашего изображения, используя темные оттенки. Тени должны быть острыми у источника света и плавно переходить в более или менее темные оттенки на дальних объектах.
                '''},
                {'text': '''Шаг 4: Изучите тональность
                Изучите тональность каждой тени. В тени может быть множество тонов - учитесь видеть более светлые и более темные тени. Это поможет вам создать реалистический эффект.
                Шаг 5: Изучите форму объектов
                Изучите форму объектов на вашем изображении. Тени должны соответствовать форме объектов. Когда свет падает на объект, это задает некоторый объем и выпуклости - тени должны повторять эти формы.
                Шаг 6: Изучите насыщение цветов
                Изучите насыщение цветов в тенях. Тени находятся в тени, и, как правило, более холодные - придайте им синеву или фиолетовые оттенки. Цвет должен соответствовать общему настроению изображения.
                ''', 
                'tts': '''Шаг 4: Изучите тональность
                Изучите тональность каждой тени. В тени может быть множество тонов - учитесь видеть более светлые и более темные тени. Это поможет вам создать реалистический эффект.
                Шаг 5: Изучите форму объектов
                Изучите форму объектов на вашем изображении. Тени должны соответствовать форме объектов. Когда свет падает на объект, это задает некоторый объем и выпуклости - тени должны повторять эти формы.
                Шаг 6: Изучите насыщение цветов
                Изучите насыщение цветов в тенях. Тени находятся в тени, и, как правило, более холодные - придайте им синеву или фиолетовые оттенки. Цвет должен соответствовать общему настроению изображения.
                '''},
                {'text': '''Шаг 7: Учет перспективы
                Учет перспективы важен, когда дело доходит до рисования теней. Когда объект находится рядом с другими объектами, это может влиять на то, как на него падает свет и, следовательно, какая тень образуется.
                В заключение, использование теней в рисовании - это важная техника, которая может добавить глубину и объем в ваше изображение. При рисовании, следите за источником света, определите тени и используйте различные тоновые оттенки для создания эффекта объема. Опыт и постоянное практикование помогут вам развиваться в этом направлении и создавать все более реалистичные изображения.
                ''', 
                'tts': '''Шаг 7: Учет перспективы
                Учет перспективы важен, когда дело доходит до рисования теней. Когда объект находится рядом с другими объектами, это может влиять на то, как на него падает свет и, следовательно, какая тень образуется.
                В заключение, использование теней в рисовании - это важная техника, которая может добавить глубину и объем в ваше изображение. При рисовании, следите за источником света, определите тени и используйте различные тоновые оттенки для создания эффекта объема. Опыт и постоянное практикование помогут вам развиваться в этом направлении и создавать все более реалистичные изображения.
                '''},
            )
        ),
        'high': (
            (
                {'text': '''Масло - это техника, в которой краска смешивается с масляным биндером и растворителем, что позволяет создавать более глубокие и насыщенные цвета. Акрил - это техника, в которой краска смешивается с водой и акриловым биндером, что делает её более быстро высыхающей и готовой для работы, чем масло.''',
                'tts': '''Масло - это техника, в которой краска смешивается с масляным биндером и растворителем, что позволяет создавать более глубокие и насыщенные цвета. Акрил - это техника, в которой краска смешивается с водой и акриловым биндером, что делает её более быстро высыхающей и готовой для работы, чем масло.'''},
                {'text': '''Материалы, необходимые для работы с маслом и акрилом:
1. Холст или картон: выбрать подходящий материал для желаемого проекта.
2. Краски: выбрать набор качественных масляных или акриловых красок, которые будут иметь необходимые оттенки.
3. Кисти: выбрать кисти различных размеров и форм для создания различных текстур и эффектов.
4. Растворитель или вода: использовать для смешивания красок и создания разных эффектов.''',
                'tts': '''Материалы, необходимые для работы с маслом и акрилом:
Холст или картон: выбрать подходящий материал для желаемого проекта.
Краски: выбрать набор качественных масляных или акриловых красок, которые будут иметь необходимые оттенки.
Кисти: выбрать кисти различных размеров и форм для создания различных текстур и эффектов.
Растворитель или вода: использовать для смешивания красок и создания разных эффектов.'''},
                {'text': '''Приемы для работы с маслом и акрилом:
1. Глазурь: создать многослойный эффект с помощью тонких слоев краски.
2. Градиент: создать плавный переход цветов от одного к другому.
3. Текстура: использовать различные кисти и материалы для создания текстуры на прямой поверхности.
4. Скрэтчинг: используйте острые предметы, чтобы создать небольшие царапины на краске.''',
                'tts': '''Приемы для работы с маслом и акрилом:
Глазурь: создать многослойный эффект с помощью тонких слоев краски.
Градиент: создать плавный переход цветов от одного к другому.
Текстура: использовать различные кисти и материалы для создания текстуры на прямой поверхности.
Скрэтчинг: используйте острые предметы, чтобы создать небольшие царапины на краске.'''}
            ),
            (
                {'text': '''Акварель - это вид живописи, где краски создаются путем смешивания красителя и воды. На листе бумаги кистью направляют воду и краску в нужную сторону, создавая прозрачные и яркие цвета.''',
                'tts': '''Акварель - это вид живописи, где краски создаются путем смешивания красителя и воды. На листе бумаги кистью направляют воду и краску в нужную сторону, создавая прозрачные и яркие цвета.'''},
                {'text': '''Основные приемы использования акварели:
1. Мокрая на мокрую: наложить краску на мокрую бумагу, чтобы создать более плавные переходы цветов.
2. Градиент: создавать переходы цветов от светлых к темным или наоборот.
3. Сухая на мокрую: наложить краску на сухую бумагу, чтобы создать более яркие цвета.
4. Сухая кисть: использовать сухую кисть для удаления краски или создания текстуры.''',
                'tts': '''Основные приемы использования акварели:
Мокрая на мокрую: наложить краску на мокрую бумагу, чтобы создать более плавные переходы цветов.
Градиент: создавать переходы цветов от светлых к темным или наоборот.
Сухая на мокрую: наложить краску на сухую бумагу, чтобы создать более яркие цвета.
Сухая кисть: использовать сухую кисть для удаления краски или создания текстуры.'''}
            ),
            (
                {'text': '''Использование нестандартных материалов при рисовании представляет собой возможность для творческого эксперимента и может привести к созданию более интересных и уникальных произведений.
''',
                'tts': '''Использование нестандартных материалов при рисовании представляет собой возможность для творческого эксперимента и может привести к созданию более интересных и уникальных произведений.
'''},
                {'text': '''Нестандартные материалы, которые могут быть использованы при рисовании:
1. Кофе: использование кофейной гущи для создания земляного оттенка.
2. Песок: нанесение песка на рисунок для создания текстуры.
3. Листовые культуры: использование листов и цветков, чтобы создать уникальные текстуры и формы.
4. Мел: использование простого детского мела для создания графических рисунков.
5. Фольга: использование фольги для создания интересных светоотражающих эффектов.''',
                'tts': '''Нестандартные материалы, которые могут быть использованы при рисовании:
Кофе: использование кофейной гущи для создания земляного оттенка.
Песок: нанесение песка на рисунок для создания текстуры.
Листовые культуры: использование листов и цветков, чтобы создать уникальные текстуры и формы.
Мел: использование простого детского мела для создания графических рисунков.
Фольга: использование фольги для создания интересных светоотражающих эффектов.'''},
                {'text': '''Как использовать нестандартные материалы при рисовании:
1. Экспериментировать: позволить себе экспериментировать с различными материалами, чтобы найти тот, который будет подходить для вашего проекта.
2. Наносить материалы в разных слоях: использование нестандартных материалов в нескольких слоях может создавать еще больший элемент интереса.
3. Особое внимание на текстуру: при использовании нестандартных материалов, текстура может быть ключевым элементом в произведении.''',
                'tts': '''Как использовать нестандартные материалы при рисовании:
Экспериментировать: позволить себе экспериментировать с различными материалами, чтобы найти тот, который будет подходить для вашего проекта.
Наносить материалы в разных слоях: использование нестандартных материалов в нескольких слоях может создавать еще больший элемент интереса.
Особое внимание на текстуру: при использовании нестандартных материалов, текстура может быть ключевым элементом в произведении.'''}
            ),
        )},
        'cooking':
        {'easy': (
            (
                {'text': '''В этих уроках мы раскрываем все секреты кулинарии простыми уроками и рецептами. ''', 
                'tts': '''В этих уроках мы раскрываем все секреты кулинарии простыми уроками и рецептами. '''},
                {'text': '''Цель или намерение приготовления - убедиться, что приготовленная пища претерпевает физические изменения, иногда химические изменения, и с удовольствием приемлема для употребления в пищу человеком.''', 
                'tts': '''Цель или намерение приготовления - убедиться, что приготовленная пища претерпевает физические изменения, иногда химические изменения, и с удовольствием приемлема для употребления в пищу человеком.'''},

            ),
            (
{'text': '''
Приготовление пищи определяется как передача энергии от источника тепла к пище.  Выбранный вами метод придает готовому продукту определенную текстуру, внешний вид, аромат и вкус.
''', 
                'tts': '''
Приготовление пищи определяется как передача энергии от источника тепла к пище.  Выбранный вами метод придает готовому продукту определенную текстуру, внешний вид, аромат и вкус.
'''},
{'text': '''
Почему мы готовим пищу?
Пищу можно готовить по следующим причинам: чтобы изменить или улучшить вкус пищи, например, картофеля. Жареная или вареная картошка намного вкуснее сырой. Сырое мясо, рыба, птица и яйца должны быть приготовлены, чтобы их можно было безопасно употреблять, поскольку они содержат бактерии, которые могут быть вредными для нас.
''', 
                'tts': '''
Почему мы готовим пищу?
Пищу можно готовить по следующим причинам: чтобы изменить или улучшить вкус пищи, например, картофеля. Жареная или вареная картошка намного вкуснее сырой. Сырое мясо, рыба, птица и яйца должны быть приготовлены, чтобы их можно было безопасно употреблять, поскольку они содержат бактерии, которые могут быть вредными для нас.
'''}

            ),
            (
{'text': '''У каждой страны есть свои кулинарные традиции. Как правило, региональные блюда базируются на местных ингредиентах и специях, а рецепты их приготовления бережно хранятся и передаются из поколения в поколение. Для приготовления блюда могут использоваться самые разные способы тепловой обработки, поэтому для жителей других стран определенное сочетание продуктов и способ приготовления может показаться даже странным. Тем не менее многие из этих блюд являются предметом национальной гордости:
''', 
                'tts': '''У каждой страны есть свои кулинарные традиции. Как правило, региональные блюда базируются на местных ингредиентах и специях, а рецепты их приготовления бережно хранятся и передаются из поколения в поколение. Для приготовления блюда могут использоваться самые разные способы тепловой обработки, поэтому для жителей других стран определенное сочетание продуктов и способ приготовления может показаться даже странным. Тем не менее многие из этих блюд являются предметом национальной гордости:
'''},
{'text': '''Суши, Япония. Японскую кухню невозможно представить без суши. Состоит это блюдо из риса и начинки из овощей или рыбы.
Цыплята тандури, Индия. Родиной этого острого блюда из птицы считается индийский штат Пенджаб. Оттуда курица тандури распространилась по всей Индии. Перед приготовлением курицу маринуют в йогурте с различными специями, после чего запекают в специальной печи тандури.
Паэлья, Испания. Основными ингредиентами национального испанского блюда являются рис, шафран и оливковое масло. В региональных вариациях к ним добавляют морепродукты, курицу или овощи. Блюдо является символом Валенсии.
''', 
                'tts': '''Суши, Япония. Японскую кухню невозможно представить без суши. Состоит это блюдо из риса и начинки из овощей или рыбы.
Цыплята тандури, Индия. Родиной этого острого блюда из птицы считается индийский штат Пенджаб. Оттуда курица тандури распространилась по всей Индии. Перед приготовлением курицу маринуют в йогурте с различными специями, после чего запекают в специальной печи тандури.
Паэлья, Испания. Основными ингредиентами национального испанского блюда являются рис, шафран и оливковое масло. В региональных вариациях к ним добавляют морепродукты, курицу или овощи. Блюдо является символом Валенсии.
'''},
{'text': '''Кимчхи, Корея. Главное место в корейской кухне занимает кимчхи — квашеные овощи с острыми приправами. Основным компонентом блюда является пекинская капуста. К ней добавляют острый перец, лук, имбирь и чеснок и другие овощи по вкусу или растения семейства крестоцветных.
Путин, Канада. Это незамысловатое блюдо было придумано в 1950-х годах и своей простотой оно быстро завоевало популярность. Пути́н включает картофель фри, который посыпают рассольным сыром и дополняют сладковатой подливкой. 13.
Венский шницель, Австрия. Это блюдо является одним из самых известных за пределами Австрии. Шницель делается из телятины, которую окунают в муку, яйца и панировочные сухари. Обжаривается мясо в большом количестве масла и подается с зеленым или картофельным салатом, или же отварным картофелем.
''', 
                'tts': '''Кимчхи, Корея. Главное место в корейской кухне занимает кимчхи — квашеные овощи с острыми приправами. Основным компонентом блюда является пекинская капуста. К ней добавляют острый перец, лук, имбирь и чеснок и другие овощи по вкусу или растения семейства крестоцветных.
Путин, Канада. Это незамысловатое блюдо было придумано в 1950-х годах и своей простотой оно быстро завоевало популярность. Пути́н включает картофель фри, который посыпают рассольным сыром и дополняют сладковатой подливкой. 13.
Венский шницель, Австрия. Это блюдо является одним из самых известных за пределами Австрии. Шницель делается из телятины, которую окунают в муку, яйца и панировочные сухари. Обжаривается мясо в большом количестве масла и подается с зеленым или картофельным салатом, или же отварным картофелем.
'''},
            )
        ),
        'medium': (
            (
{'text': '''
Однако прежде чем начать, рекомендую ниже ознакомиться с базовыми знаниями. Если вы новичок, то обязательно ознакомьтесь.
Ножи:
Помните о трех важных помощниках – поварском ноже, зубчатом и ноже для снятия кожуры. Они всегда должны быть на вашей кухне. Используйте их по назначению. Не нужно давить томаты поварским ножом – возьмите зубчатый.
''', 
                'tts': '''
Однако прежде чем начать, рекомендую ниже ознакомиться с базовыми знаниями. Если вы новичок, то обязательно ознакомьтесь.
Ножи:
Помните о трех важных помощниках – поварском ноже, зубчатом и ноже для снятия кожуры. Они всегда должны быть на вашей кухне. Используйте их по назначению. Не нужно давить томаты поварским ножом – возьмите зубчатый.
'''},
{'text': '''
2. Во время подготовки ингредиентов по рецепту убедитесь, что вы следуете инструкциям по нарезке:
Если рецепт требует кубики по 2,5 см, тонкую соломку (жульен) или мелко нарубленные кусочки (mince) – убедитесь, что вы  знаете, что означают эти слова. Кстати, в Интернете можно найти специальную разделочную доску с разметкой, которая помогает нарезать продукты с точностью до миллиметра.

''', 
                'tts': '''
2. Во время подготовки ингредиентов по рецепту убедитесь, что вы следуете инструкциям по нарезке:
Если рецепт требует кубики по 2,5 см, тонкую соломку (жульен) или мелко нарубленные кусочки (mince) – убедитесь, что вы  знаете, что означают эти слова. Кстати, в Интернете можно найти специальную разделочную доску с разметкой, которая помогает нарезать продукты с точностью до миллиметра.

'''},
{'text': '''
3. Перед тем как приступить к приготовлению, нарежьте ингредиенты и разложите их по небольшим контейнерам или стеклянным мискам:
Это называется mise en place. Так вы никогда не забудете ингредиент. Вот увидите, это навсегда изменит вашу готовку.

''', 
                'tts': '''
3. Перед тем как приступить к приготовлению, нарежьте ингредиенты и разложите их по небольшим контейнерам или стеклянным мискам:
Это называется mise en place. Так вы никогда не забудете ингредиент. Вот увидите, это навсегда изменит вашу готовку.

'''}
            ),
            (
{'text': '''
Преступим к готовке. Начнем с легких блюд.
Яичница. Схваченный белок и нежный жидкий желток — вот как должна выглядеть идеальная глазунья. Это блюдо проще делать на антипригарной сковороде. Тогда яйца точно не будут прилипать ко дну.
Ингредиенты:
1–2 столовые ложки растительного масла или кусочек сливочного;
1 или несколько яиц;
соль — по вкусу.
Приготовление:
Слегка прогрейте сковороду. Влейте растительное масло или растопите сливочное.
Аккуратно добавьте яйца. Можно разбить их сразу над сковородой или же в небольшую отдельную ёмкость, перелив затем в сковороду. Убавьте огонь до минимального.
Жарить яичницу на медленном огне нужно 4–5 минут. Блюдо будет готово, когда белок побелеет и схватится. Не забывайте, что желток при этом должен остаться жидким, если вы не жарили с двух сторон. Солить яйца лучше в конце приготовления или уже после подачи на стол.
''', 
                'tts': '''
Преступим к готовке. Начнем с легких блюд.
Яичница. Схваченный белок и нежный жидкий желток — вот как должна выглядеть идеальная глазунья. Это блюдо проще делать на антипригарной сковороде. Тогда яйца точно не будут прилипать ко дну.
Ингредиенты:
1–2 столовые ложки растительного масла или кусочек сливочного;
1 или несколько яиц;
соль — по вкусу.
Приготовление:
Слегка прогрейте сковороду. Влейте растительное масло или растопите сливочное.
Аккуратно добавьте яйца. Можно разбить их сразу над сковородой или же в небольшую отдельную ёмкость, перелив затем в сковороду. Убавьте огонь до минимального.
Жарить яичницу на медленном огне нужно 4–5 минут. Блюдо будет готово, когда белок побелеет и схватится. Не забывайте, что желток при этом должен остаться жидким, если вы не жарили с двух сторон. Солить яйца лучше в конце приготовления или уже после подачи на стол.
'''},
{'text': '''
Варка пельменей. Оптимальное соотношение — 500 г пельменей на 1,5 л воды. Но если вы хотите получить более насыщенный бульон, берите меньше воды. Главное — помните: жидкость должна полностью покрывать пельмени, чтобы они могли свободно плавать и не слиплись. Не забудьте добавить соль на 1 л воды понадобится примерно одна чайная ложка. Вкус и аромат пельменей улучшат 1–2 сушёных лавровых листа и несколько горошин чёрного перца. Также в воду можно добавить небольшую нарезанную или целую луковицу и любимые специи.
Вскипятите воду, добавьте все необходимое и перемешайте. Доведите воду до кипения ещё раз. Пельмени всплывут на поверхность. Убавьте огонь до среднего и варите их ещё 5–7 минут, периодически помешивая.
''', 
                'tts': '''
Варка пельменей. Оптимальное соотношение — 500 г пельменей на 1,5 л воды. Но если вы хотите получить более насыщенный бульон, берите меньше воды. Главное — помните: жидкость должна полностью покрывать пельмени, чтобы они могли свободно плавать и не слиплись. Не забудьте добавить соль на 1 л воды понадобится примерно одна чайная ложка. Вкус и аромат пельменей улучшат 1–2 сушёных лавровых листа и несколько горошин чёрного перца. Также в воду можно добавить небольшую нарезанную или целую луковицу и любимые специи.
Вскипятите воду, добавьте все необходимое и перемешайте. Доведите воду до кипения ещё раз. Пельмени всплывут на поверхность. Убавьте огонь до среднего и варите их ещё 5–7 минут, периодически помешивая.
'''}
            ),
            (
{'text': '''
Подборка легких десертов для вас.
Кекс. Вы, наверное, уже слышали о супер-кексах в кружке, которые можно сделать за 5 минут? А я расскажу, как приготовить кекс за 5 минут в микроволновке без молока и яиц. Вегетарианская версия — для вас!
Состав:
Мука — 1,5 стакана
Вода — 1 стакан
Сахарная пудра — 1 стакан
Масло растительное — 5 ст. ложек
Какао — 3 ст. ложки
Сода — 1 чайная ложка
Ваниль — 1 чайная ложка
Уксус яблочный — 1 чайная ложка
Соль — 1 щепотка.
1. Смешаем в миске сначала все сухие ингредиенты: муку, сахар, какао, соду, ваниль и соль, а потом вольём воду и масло, добавим уксус и перемешаем до однородности.  2. Маслом смажем форму, вольём туда тесто и отправим в микроволновку.  3. Запекаем 5 минут при максимальной мощности, потом выключаем, пусть еще пару минут постоит в микроволновке. После открытия проверяем, если серединка схватилась, блюдо готово. Если нет, то еще на 30 секунд включите микроволновку. 4. При подаче посыпайте остатками сахарной пудры и готово!
''', 
                'tts': '''
Подборка легких десертов для вас.
Кекс. Вы, наверное, уже слышали о супер-кексах в кружке, которые можно сделать за 5 минут? А я расскажу, как приготовить кекс за 5 минут в микроволновке без молока и яиц. Вегетарианская версия — для вас!
Состав:
Мука — 1,5 стакана
Вода — 1 стакан
Сахарная пудра — 1 стакан
Масло растительное — 5 ст. ложек
Какао — 3 ст. ложки
Сода — 1 чайная ложка
Ваниль — 1 чайная ложка
Уксус яблочный — 1 чайная ложка
Соль — 1 щепотка.
1. Смешаем в миске сначала все сухие ингредиенты: муку, сахар, какао, соду, ваниль и соль, а потом вольём воду и масло, добавим уксус и перемешаем до однородности.  2. Маслом смажем форму, вольём туда тесто и отправим в микроволновку.  3. Запекаем 5 минут при максимальной мощности, потом выключаем, пусть еще пару минут постоит в микроволновке. После открытия проверяем, если серединка схватилась, блюдо готово. Если нет, то еще на 30 секунд включите микроволновку. 4. При подаче посыпайте остатками сахарной пудры и готово!
'''},
{'text': '''
Колбаска. Рецепт печенья колбаска очень популярный из-за своей простоты, его можно приготовить из того, что есть под рукой.
Основные ингредиенты:
Сахар — 100 грамм
Перепелиные яйца 5-6 штук (или одно куриное яйцо)
Какао-порошок — 3 ст. ложки
Сливочное масло — 50 грамм
Печенье — 200 грамм
Орехи — 100 грамм.
Поломайте печенье руками на небольшие кусочки.
Орехи поджарьте на сковороде, измельчите в крошку.
 Смешайте орехи, какао, сахар и яйца до однородности. Добавьте печенье и аккуратно перемешайте.
Выложите получившуюся массу на пергаментную бумагу или пленку и скрутите в форму колбаски.
 Отправьте в холодильник на 4-5 часов.
''', 
                'tts': '''
Колбаска. Рецепт печенья колбаска очень популярный из-за своей простоты, его можно приготовить из того, что есть под рукой.
Основные ингредиенты:
Сахар — 100 грамм
Перепелиные яйца 5-6 штук (или одно куриное яйцо)
Какао-порошок — 3 ст. ложки
Сливочное масло — 50 грамм
Печенье — 200 грамм
Орехи — 100 грамм.
Поломайте печенье руками на небольшие кусочки.
Орехи поджарьте на сковороде, измельчите в крошку.
 Смешайте орехи, какао, сахар и яйца до однородности. Добавьте печенье и аккуратно перемешайте.
Выложите получившуюся массу на пергаментную бумагу или пленку и скрутите в форму колбаски.
 Отправьте в холодильник на 4-5 часов.
'''}
            )
        ),
        'high': (
            (
{'text': '''Нет ничего лучше кулинарных проектов, чтобы сосредоточиться и дать работу праздным рукам. Будь то приготовление оригинального семейного ужина, заготовки на неделю или разовый эксперимент со сложным десертом — это один из лучших способов направить энергию на выполнение одной задачи, требующей времени и внимания.
Мы решили раскрыть сокровенные кулинарные секреты и хитрости, которыми поделились профессиональные повара после того как они ответили на вопрос: «Какой ваш единственный любимый ингредиент при приготовлении блюд и почему?».

1. Лимонный сок
«Он усиливает вкус почти всех блюд, при этом не доминирует так сильно, как уксус»

2. Сумах
«Купите себе огромный мешок примерно за 15 долларов и поблагодарите меня позже. Он лимонный, солено-сладкий, с ароматом дымка и земли. Посыпьте им тосты, карри, курицу, стейк, тако, яйца с пряностями и даже мороженое — он работает практически со всем»
''', 
                'tts': '''Нет ничего лучше кулинарных проектов, чтобы сосредоточиться и дать работу праздным рукам. Будь то приготовление оригинального семейного ужина, заготовки на неделю или разовый эксперимент со сложным десертом — это один из лучших способов направить энергию на выполнение одной задачи, требующей времени и внимания.
Мы решили раскрыть сокровенные кулинарные секреты и хитрости, которыми поделились профессиональные повара после того как они ответили на вопрос: «Какой ваш единственный любимый ингредиент при приготовлении блюд и почему?».

1. Лимонный сок
«Он усиливает вкус почти всех блюд, при этом не доминирует так сильно, как уксус»

2. Сумах
«Купите себе огромный мешок примерно за 15 долларов и поблагодарите меня позже. Он лимонный, солено-сладкий, с ароматом дымка и земли. Посыпьте им тосты, карри, курицу, стейк, тако, яйца с пряностями и даже мороженое — он работает практически со всем»
'''},
{'text': '''3. Соевый соус
«Я добавляю его ко всему, включая фрукты. Используйте его для придания аромата безвкусным супам и маринования мяса и овощей. Если вы устали и голодны, рис с небольшим количеством соевого соуса станет быстрой и сытной едой»

4. Кочхуджан
«Если вы готовите пикантное блюдо, в котором можно использовать острые нотки, лучше всего подойдет корейская паста из красного чили — кочхуджан»

5. Лист кафрского лайма
«Это невероятное дополнение ко всем видам супов, карри и риса. Он дополняет блюда, вкус которых в значительной степени зависит от душистого аромата. Нашинкуйте и добавьте в конце приготовления»
''', 
                'tts': '''3. Соевый соус
«Я добавляю его ко всему, включая фрукты. Используйте его для придания аромата безвкусным супам и маринования мяса и овощей. Если вы устали и голодны, рис с небольшим количеством соевого соуса станет быстрой и сытной едой»

4. Кочхуджан
«Если вы готовите пикантное блюдо, в котором можно использовать острые нотки, лучше всего подойдет корейская паста из красного чили — кочхуджан»

5. Лист кафрского лайма
«Это невероятное дополнение ко всем видам супов, карри и риса. Он дополняет блюда, вкус которых в значительной степени зависит от душистого аромата. Нашинкуйте и добавьте в конце приготовления»
'''},       
            ),
            (
{'text': '''
Запекание — это простой и полезный способ приготовить практически любой овощ. Используйте острый кухонный нож, чтобы нарезать овощи небольшими кусочками, выложить их в миску, затем смажьте 1-2 столовыми ложками (15-30 мл) растительного масла, такого как оливковое, каноловое или кунжутное. Посыпьте их солью и перцем, затем выложите на противень. Запекайте в духовке до тех пор, пока вы не сможете легко проткнуть их вилкой, и они слегка не подрумянятся или не обуглятся по краям. Запекание особенно полезно для корнеплодов, таких как картофель, морковь и пастернак, но вы также можете запечь брюссельскую капусту, цветную капусту, цуккини и болгарский перец.
Некоторые овощи готовятся дольше, чем другие. Например, картофель будет готовиться намного медленнее, чем спаржа. Большинству овощей потребуется провести в духовке не менее 15 минут, прежде чем они станут мягкими.
''', 
                'tts': '''
Запекание — это простой и полезный способ приготовить практически любой овощ. Используйте острый кухонный нож, чтобы нарезать овощи небольшими кусочками, выложить их в миску, затем смажьте 1-2 столовыми ложками (15-30 мл) растительного масла, такого как оливковое, каноловое или кунжутное. Посыпьте их солью и перцем, затем выложите на противень. Запекайте в духовке до тех пор, пока вы не сможете легко проткнуть их вилкой, и они слегка не подрумянятся или не обуглятся по краям. Запекание особенно полезно для корнеплодов, таких как картофель, морковь и пастернак, но вы также можете запечь брюссельскую капусту, цветную капусту, цуккини и болгарский перец.
Некоторые овощи готовятся дольше, чем другие. Например, картофель будет готовиться намного медленнее, чем спаржа. Большинству овощей потребуется провести в духовке не менее 15 минут, прежде чем они станут мягкими.
'''},
{'text': '''
 Готовьте мясо в духовке, чтобы оно получилось ароматным и нежным. В духовке можно приготовить практически любой кусок мяса. Разогрейте духовку до  60°C примерно на 20 минут, пока мясо остается при комнатной температуре, чтобы обеспечить равномерное приготовление. Посолите и поперчите мясо снаружи и выложите его в широкую форму для запекания, желательно на решетку или на гряду с овощами. За 30 минут до того, как в вашем рецепте указано, что мясо должно быть готово, используйте термометр для мяса, чтобы проверить, достигло ли оно безопасной внутренней температуры. Время, необходимое для обжаривания куска мяса, и рекомендуемая температура приготовления зависят от типа мяса и его размера. Проверьте упа
''', 
                'tts': '''
 Готовьте мясо в духовке, чтобы оно получилось ароматным и нежным. В духовке можно приготовить практически любой кусок мяса. Разогрейте духовку до  60°C примерно на 20 минут, пока мясо остается при комнатной температуре, чтобы обеспечить равномерное приготовление. Посолите и поперчите мясо снаружи и выложите его в широкую форму для запекания, желательно на решетку или на гряду с овощами. За 30 минут до того, как в вашем рецепте указано, что мясо должно быть готово, используйте термометр для мяса, чтобы проверить, достигло ли оно безопасной внутренней температуры. Время, необходимое для обжаривания куска мяса, и рекомендуемая температура приготовления зависят от типа мяса и его размера. Проверьте упа
'''}
            ),
            (
{'text': '''Создание авторских блюд - это не только кулинарное искусство, но и процесс, который требует воображения, творческого мышления и умения экспериментировать с ингредиентами. Этот урок расскажет о том, как создать свои авторские блюда.

Шаг 1: Выберите ингредиенты

Перед тем, как начать кулинарный эксперимент, нужно выбрать несколько ингредиентов, с которыми вы будете работать. Вы можете выбрать сезонные продукты или ингредиенты, которые вы еще не пробовали раньше.

Шаг 2: Определите стиль блюда

Определите стиль блюда, который вы хотите создать. Вы можете выбрать мировую кухню или смешать несколько стилей. Это поможет вам выбрать ингредиенты и методы приготовления, которые помогут создать уникальное блюдо.
''', 
                'tts': '''Создание авторских блюд - это не только кулинарное искусство, но и процесс, который требует воображения, творческого мышления и умения экспериментировать с ингредиентами. Этот урок расскажет о том, как создать свои авторские блюда.

Шаг 1: Выберите ингредиенты

Перед тем, как начать кулинарный эксперимент, нужно выбрать несколько ингредиентов, с которыми вы будете работать. Вы можете выбрать сезонные продукты или ингредиенты, которые вы еще не пробовали раньше.

Шаг 2: Определите стиль блюда

Определите стиль блюда, который вы хотите создать. Вы можете выбрать мировую кухню или смешать несколько стилей. Это поможет вам выбрать ингредиенты и методы приготовления, которые помогут создать уникальное блюдо.
'''},
{'text': '''Шаг 3: Создайте концепцию блюда

Создайте концепцию блюда, которое вы хотите создать. Размышляйте о блюде и его текстуре, вкусе, аромате. Это поможет вам определить, какие ингредиенты нужно использовать и как их сочетать.

Шаг 4: Экспериментируйте

Начните экспериментировать с ингредиентами. Используйте новые сочетания или методы приготовления. Это поможет вам создать уникальное блюдо, которое никто другой не сможет повторить.
''', 
                'tts': '''Шаг 3: Создайте концепцию блюда

Создайте концепцию блюда, которое вы хотите создать. Размышляйте о блюде и его текстуре, вкусе, аромате. Это поможет вам определить, какие ингредиенты нужно использовать и как их сочетать.

Шаг 4: Экспериментируйте

Начните экспериментировать с ингредиентами. Используйте новые сочетания или методы приготовления. Это поможет вам создать уникальное блюдо, которое никто другой не сможет повторить.
'''},
{'text': '''Шаг 5: Проверьте блюдо на вкус

После того, как вы создали блюдо, проверьте его на вкус. Если что-то не так, то добавьте или уберите ингредиенты, чтобы достичь желаемого вкуса.

Шаг 6: Подумайте о презентации блюда

Презентация блюда также играет важную роль в создании его авторского шарма. Разместите блюдо на красивой посуде и подумайте о декорации, которая подчеркнет его стиль.
''', 
                'tts': '''Шаг 5: Проверьте блюдо на вкус

После того, как вы создали блюдо, проверьте его на вкус. Если что-то не так, то добавьте или уберите ингредиенты, чтобы достичь желаемого вкуса.

Шаг 6: Подумайте о презентации блюда

Презентация блюда также играет важную роль в создании его авторского шарма. Разместите блюдо на красивой посуде и подумайте о декорации, которая подчеркнет его стиль.
'''},
{'text': '''Шаг 7: Дайте название блюду

Для того, чтобы ваше блюдо стало авторским, дайте ему уникальное название. Название должно отражать его вкус, стиль и концепцию.

В заключение, создание авторских блюд - это процесс, который требует воображения, творческого мышления и умения экспериментировать с ингредиентами. Не бойтесь проявлять свою индивидуальность и создавать неповторимые блюда, которые заставят ваших гостей удивляться и наслаждаться вкусом.
''', 
                'tts': '''Шаг 7: Дайте название блюду

Для того, чтобы ваше блюдо стало авторским, дайте ему уникальное название. Название должно отражать его вкус, стиль и концепцию.

В заключение, создание авторских блюд - это процесс, который требует воображения, творческого мышления и умения экспериментировать с ингредиентами. Не бойтесь проявлять свою индивидуальность и создавать неповторимые блюда, которые заставят ваших гостей удивляться и наслаждаться вкусом.
'''},

                
            )
        )},
        'guitar':
        {'easy': (
            (
                {'text': '''Игра на гитаре – это увлекательное занятие, которое требует наличия определенных навыков и знаний. Но не нужно унывать, если вы новичок, потому что основы игры на гитаре легко усвоить при правильном подходе. В этом уроке вы узнаете основные принципы игры на гитаре, которые помогут вам начать свой музыкальный путь.''', 
                'tts': '''Игра на гитаре – это увлекательное занятие, которое требует наличия определенных навыков и знаний. Но не нужно унывать, если вы новичок, потому что основы игры на гитаре легко усвоить при правильном подходе. В этом уроке вы узнаете основные принципы игры на гитаре, которые помогут вам начать свой музыкальный путь.'''},
                {'text': '''Выбор гитары

Первое, что нужно сделать, чтобы начать играть на гитаре – это выбрать инструмент. Существует множество типов гитар, но для начала самым подходящим может оказаться акустическая гитара, так как она отличается от электрической своей простотой и доступностью. Кроме того, для игры на акустической гитаре не нужно приобретать дополнительное оборудование, такое как усилитель.''', 
                'tts': '''Выбор гитары

Первое, что нужно сделать, чтобы начать играть на гитаре – это выбрать инструмент. Существует множество типов гитар, но для начала самым подходящим может оказаться акустическая гитара, так как она отличается от электрической своей простотой и доступностью. Кроме того, для игры на акустической гитаре не нужно приобретать дополнительное оборудование, такое как усилитель.'''},
                {'text': '''Настройка гитары

Прежде чем начать играть на гитаре, необходимо настроить ее. Это делается с помощью специального устройства – тюнера. Обычно он представляет собой небольшой прибор с дисплеем, на котором отображаются ноты. Регулировать настройку гитары можно, поворачивая ключи на головке гитары.''', 
                'tts': '''Настройка гитары

Прежде чем начать играть на гитаре, необходимо настроить ее. Это делается с помощью специального устройства – тюнера. Обычно он представляет собой небольшой прибор с дисплеем, на котором отображаются ноты. Регулировать настройку гитары можно, поворачивая ключи на головке гитары.'''},
                {'text': '''Позиция рук

Для игры на гитаре необходимо правильно разместить руки. Правая рука отвечает за строение, а левая – за зажим струн. Зажимать струны нужно около ближнего к голове конца грифа, при этом кисть левой руки должна быть свободной и не сжиматься. Например, если вам нужно зажать первую ладовую на первой струне, ее нужно прижать пальцем указательного пальца левой руки, а следующее звено на той же струне уже зажимается двумя первыми пальцами – указательным и средним. Правая рука должна находиться ближе к резонатору гитары и скользить по струнам в результате движения правого плеча.''', 
                'tts': '''Позиция рук

Для игры на гитаре необходимо правильно разместить руки. Правая рука отвечает за строение, а левая – за зажим струн. Зажимать струны нужно около ближнего к голове конца грифа, при этом кисть левой руки должна быть свободной и не сжиматься. Например, если вам нужно зажать первую ладовую на первой струне, ее нужно прижать пальцем указательного пальца левой руки, а следующее звено на той же струне уже зажимается двумя первыми пальцами – указательным и средним. Правая рука должна находиться ближе к резонатору гитары и скользить по струнам в результате движения правого плеча.'''},
                {'text': '''Основные аккорды

Одним из основных элементов игры на гитаре являются аккорды. Аккорды – это группы нот, которые звучат вместе и создают гармонию. Существует множество разных аккордов, но для начала достаточно выучить несколько основных. Например, аккорды Do мажор (C), Соль мажор (G) и Ля минор (Am) являются одними из самых простых и часто используемых. Чтобы выучить аккорды, можно использовать видео-уроки на YouTube или книги для начинающих гитаристов.''', 
                'tts': '''Основные аккорды

Одним из основных элементов игры на гитаре являются аккорды. Аккорды – это группы нот, которые звучат вместе и создают гармонию. Существует множество разных аккордов, но для начала достаточно выучить несколько основных. Например, аккорды Do мажор (C), Соль мажор (G) и Ля минор (Am) являются одними из самых простых и часто используемых. Чтобы выучить аккорды, можно использовать видео-уроки на YouTube или книги для начинающих гитаристов.'''},
                {'text': '''Разминка пальцев

Перед тем как заняться игрой на гитаре, необходимо сделать разминку пальцев. Это поможет предотвратить травмы и повысить точность игры. Популярным упражнением на разминку является «пробежка» пальцев по грифу гитары. Для этого нужно начинать с указательного пальца и двигаться дальше по струнам по порядку, затем возвращаться обратно. Повторять упражнение нужно несколько раз подряд.''', 
                'tts': '''Разминка пальцев

Перед тем как заняться игрой на гитаре, необходимо сделать разминку пальцев. Это поможет предотвратить травмы и повысить точность игры. Популярным упражнением на разминку является «пробежка» пальцев по грифу гитары. Для этого нужно начинать с указательного пальца и двигаться дальше по струнам по порядку, затем возвращаться обратно. Повторять упражнение нужно несколько раз подряд.'''},
                {'text': '''Заключение

Начинающему гитаристу необходимо уделить время изучению основ игры на гитаре. Первые шаги, включающие выбор гитары, настройку инструмента и разминку пальцев, являются особенно важными. Учебные ресурсы, такие как видео-уроки и книги, помогут вам усовершенствовать свои навыки и двигаться к своей цели – стать профессиональным гитаристом.''', 
                'tts': '''Заключение

Начинающему гитаристу необходимо уделить время изучению основ игры на гитаре. Первые шаги, включающие выбор гитары, настройку инструмента и разминку пальцев, являются особенно важными. Учебные ресурсы, такие как видео-уроки и книги, помогут вам усовершенствовать свои навыки и двигаться к своей цели – стать профессиональным гитаристом.'''},

            ),
            (
                {'text': '''Ритм и бой – это важнейшие элементы гитарной игры. Они позволяют создавать музыкальный сюжет и передавать эмоции. Для игры на гитаре важно научиться правильно считать и разбивать ритмы, выбирать подходящие аккорды и знать, как играть разные виды боя.
''', 
                'tts': '''Ритм и бой – это важнейшие элементы гитарной игры. Они позволяют создавать музыкальный сюжет и передавать эмоции. Для игры на гитаре важно научиться правильно считать и разбивать ритмы, выбирать подходящие аккорды и знать, как играть разные виды боя.
'''},
                {'text': '''Разбиение ритмов

Первым шагом в изучении ритма и боя на гитаре является правильное разбиение ритмов. Ритм – это счет, который звучит в музыке и создает ритмическую структуру. В большинстве случаев ритм состоит из ударных и безударных элементов. Ударные элементы при этом принимаются за "1" и "2" а также "3" и "4". Безударные элементы – за "и". Самый простой ритм, который можно разбить, называется «четвертью». В этом случае каждый удар происходит на 1,2,3,4, а каждый следующий "и" между цифрами. Существуют и другие виды ритмов, например, восьмая, шестнадцатая и т.д. Для практики разбиения ритмов можно использовать метроном, который поможет держать такт.''', 
                'tts': '''Разбиение ритмов

Первым шагом в изучении ритма и боя на гитаре является правильное разбиение ритмов. Ритм – это счет, который звучит в музыке и создает ритмическую структуру. В большинстве случаев ритм состоит из ударных и безударных элементов. Ударные элементы при этом принимаются за "1" и "2" а также "3" и "4". Безударные элементы – за "и". Самый простой ритм, который можно разбить, называется «четвертью». В этом случае каждый удар происходит на 1,2,3,4, а каждый следующий "и" между цифрами. Существуют и другие виды ритмов, например, восьмая, шестнадцатая и т.д. Для практики разбиения ритмов можно использовать метроном, который поможет держать такт.'''},
                {'text': '''Выбор аккордов

Правильный выбор аккордов является важным элементом игры на гитаре. В зависимости от жанра музыки, который вы играете, нужно выбирать подходящие аккорды. Например, для игры в стиле рока или металла часто используются аккорды с пятой и шестой ладовой, а для игры в стиле фолк аккорды с первой и второй ладовыми. В любом случае, в начале лучше начать с простых аккордов, таких как C, G, D, Em, Am.''', 
                'tts': '''Выбор аккордов

Правильный выбор аккордов является важным элементом игры на гитаре. В зависимости от жанра музыки, который вы играете, нужно выбирать подходящие аккорды. Например, для игры в стиле рока или металла часто используются аккорды с пятой и шестой ладовой, а для игры в стиле фолк аккорды с первой и второй ладовыми. В любом случае, в начале лучше начать с простых аккордов, таких как C, G, D, Em, Am.'''},
                {'text': '''Различные виды боя

Существует множество видов боя на гитаре, которые создают уникальную атмосферу музыки. Их выбор зависит от стиля музыки и ритмической структуры композиции. Например, в популярных болеро используются долгие аккордные удары, а в рок-музыке бывает несколько видов боя, включая простейший восьмисотый бой (8/4). Для начинающих гитаристов лучше начать с простых боев, например, струнный бой. Этот бой основан на простом движении вниз и вверх, в результате которого бьются две струны. Он часто используется в игре на акустической гитаре.''', 
                'tts': '''Различные виды боя

Существует множество видов боя на гитаре, которые создают уникальную атмосферу музыки. Их выбор зависит от стиля музыки и ритмической структуры композиции. Например, в популярных болеро используются долгие аккордные удары, а в рок-музыке бывает несколько видов боя, включая простейший восьмисотый бой (8/4). Для начинающих гитаристов лучше начать с простых боев, например, струнный бой. Этот бой основан на простом движении вниз и вверх, в результате которого бьются две струны. Он часто используется в игре на акустической гитаре.'''},
                {'text': '''Заключение

Ритм и бой – это элементы, которые важны для создания музыки на гитаре. Научиться разбивать ритмы, выбирать подходящие аккорды и играть различные виды боя можно с помощью упражнений и практики. Кроме того, важно понимать, что стиль игры на гитаре зависит от многих факторов, включая индивидуальный подход и душевное состояние. Большим преимуществом является наличие учебных ресурсов, таких как инструкции для начинающих, видеоуроки и книги.''', 
                'tts': '''Заключение

Ритм и бой – это элементы, которые важны для создания музыки на гитаре. Научиться разбивать ритмы, выбирать подходящие аккорды и играть различные виды боя можно с помощью упражнений и практики. Кроме того, важно понимать, что стиль игры на гитаре зависит от многих факторов, включая индивидуальный подход и душевное состояние. Большим преимуществом является наличие учебных ресурсов, таких как инструкции для начинающих, видеоуроки и книги.'''},
                
            ),
            (
                {'text': '''Игра с помощью табулатуры – это один из самых популярных методов обучения игры на гитаре. Табулатура представляет собой удобную нотную запись с аккордами, которая позволяет играть композиции без особых навыков чтения музыкального листа и нот. В этом уроке вы узнаете, как играть с помощью табулатуры на гитаре.
''', 
                'tts': '''Игра с помощью табулатуры – это один из самых популярных методов обучения игры на гитаре. Табулатура представляет собой удобную нотную запись с аккордами, которая позволяет играть композиции без особых навыков чтения музыкального листа и нот. В этом уроке вы узнаете, как играть с помощью табулатуры на гитаре.
'''},
                {'text': '''Чтение табулатуры

Первый шаг в изучении игры с помощью табулатуры – это научиться читать ее. Табулатура – это нотная запись, которая представляет струны гитары и цифры на них. Цифры представляют собой номер лада, на котором нужно зажимать струну. Например, если в табулатуре написано 2 на красной струне, это значит, что нужно зажать вторую ладовую на этой струне. Нули (0) обозначают открытые струны, которые нужно бить без зажимания. Правильное чтение табулатуры позволит вам играть музыку без особых навыков чтения нот.''', 
                'tts': '''Чтение табулатуры

Первый шаг в изучении игры с помощью табулатуры – это научиться читать ее. Табулатура – это нотная запись, которая представляет струны гитары и цифры на них. Цифры представляют собой номер лада, на котором нужно зажимать струну. Например, если в табулатуре написано 2 на красной струне, это значит, что нужно зажать вторую ладовую на этой струне. Нули (0) обозначают открытые струны, которые нужно бить без зажимания. Правильное чтение табулатуры позволит вам играть музыку без особых навыков чтения нот.'''},
                {'text': '''Выбор песен

После того, как вы научитесь читать табулатуру, можно выбирать песни для игры. Многие популярные композиции доступны в табулатурах на разных сайтах и форумах. Начните с простых песен и постепенно усложняйте свой выбор, когда овладеете более сложными техниками игры.''', 
                'tts': '''Выбор песен

После того, как вы научитесь читать табулатуру, можно выбирать песни для игры. Многие популярные композиции доступны в табулатурах на разных сайтах и форумах. Начните с простых песен и постепенно усложняйте свой выбор, когда овладеете более сложными техниками игры.'''},
                {'text': '''Позиция рук

Чтобы играть с помощью табулатуры на гитаре, важно научиться правильно держать инструмент. Один из важнейших аспектов – это правильная позиция рук. Зажимайте струны грифа левой рукой, расположив ее на достаточном удалении от этого грифа. Правая рука должна бить струну с верху створа или дистанционно работая над гребенкой. Руки не должны сжиматься и двигаться слишком резко или быстро.''', 
                'tts': '''Позиция рук

Чтобы играть с помощью табулатуры на гитаре, важно научиться правильно держать инструмент. Один из важнейших аспектов – это правильная позиция рук. Зажимайте струны грифа левой рукой, расположив ее на достаточном удалении от этого грифа. Правая рука должна бить струну с верху створа или дистанционно работая над гребенкой. Руки не должны сжиматься и двигаться слишком резко или быстро.'''},
                {'text': '''Техники игры

Существует множество техник игры на гитаре, которые можно использовать при игре с помощью табулатуры. Некоторые из них включают в себя различные аккордовые формы, мелодики и сложные боевые приёмы. Для начала можно начать с простых приёмов, таких как струнный бой и различные мелодические фишки, которые помогут создать основу для вашей игры путём настройки интонации и слухового контроля.''', 
                'tts': '''Техники игры

Существует множество техник игры на гитаре, которые можно использовать при игре с помощью табулатуры. Некоторые из них включают в себя различные аккордовые формы, мелодики и сложные боевые приёмы. Для начала можно начать с простых приёмов, таких как струнный бой и различные мелодические фишки, которые помогут создать основу для вашей игры путём настройки интонации и слухового контроля.'''},
                {'text': '''Заключение

Игра с помощью табулатуры – это отличный способ начать играть на гитаре, не имея формального музыкального образования и навыков чтения нот. Она поможет вам научиться читать нотную запись и создавать ритмику и структуру в музыке. Для начала рекомендуется выбирать простые песни и постепенно усложнять диапазон вашей игры. Важно также научиться правильно держать инструмент и использовать различные техники игры на гитаре. И не забывайте, главным в этом процессе является практика и постоянство.''', 
                'tts': '''Заключение

Игра с помощью табулатуры – это отличный способ начать играть на гитаре, не имея формального музыкального образования и навыков чтения нот. Она поможет вам научиться читать нотную запись и создавать ритмику и структуру в музыке. Для начала рекомендуется выбирать простые песни и постепенно усложнять диапазон вашей игры. Важно также научиться правильно держать инструмент и использовать различные техники игры на гитаре. И не забывайте, главным в этом процессе является практика и постоянство.'''},
                
            ),
        ),
        'medium': (
            (
                {'text': '''Баррэ аккорды и баррэ техника на гитаре – это одна из важнейших техник игры на гитаре. Эта техника позволяет играть аккорды, используя один палец, что делает звучание более четким и громким. Если вы хотите научиться играть на гитаре, то без усвоения этой техники обойтись нельзя. Давайте рассмотрим, как изучить баррэ аккорды и баррэ технику на гитаре.''', 
                'tts': '''Баррэ аккорды и баррэ техника на гитаре – это одна из важнейших техник игры на гитаре. Эта техника позволяет играть аккорды, используя один палец, что делает звучание более четким и громким. Если вы хотите научиться играть на гитаре, то без усвоения этой техники обойтись нельзя. Давайте рассмотрим, как изучить баррэ аккорды и баррэ технику на гитаре.'''},
                {'text': '''Что такое баррэ аккорд?

Баррэ аккорд – это аккорд, который играется с помощью одного пальца, который нажимает на все струны на одном ладу гитары. Большинство баррэ аккордов играются на первом или втором ладу. Для того, чтобы сыграть баррэ аккорд, нужно применять баррэ технику.''', 
                'tts': '''Что такое баррэ аккорд?

Баррэ аккорд – это аккорд, который играется с помощью одного пальца, который нажимает на все струны на одном ладу гитары. Большинство баррэ аккордов играются на первом или втором ладу. Для того, чтобы сыграть баррэ аккорд, нужно применять баррэ технику.'''},
                {'text': '''Что такое баррэ техника?

Баррэ техника – это техника, которая позволяет играть несколько струн на одном ладу, используя один палец. Пальцы обычно нажимают на струны на разных ладах, но с помощью баррэ техники можно играть на нескольких струнах на одном ладу. Для того, чтобы выполнять баррэ технику, нужно сильно и равномерно нажимать палец на все струны на ладу.''', 
                'tts': '''Что такое баррэ техника?

Баррэ техника – это техника, которая позволяет играть несколько струн на одном ладу, используя один палец. Пальцы обычно нажимают на струны на разных ладах, но с помощью баррэ техники можно играть на нескольких струнах на одном ладу. Для того, чтобы выполнять баррэ технику, нужно сильно и равномерно нажимать палец на все струны на ладу.'''},
                {'text': '''Как изучить баррэ технику и баррэ аккорды?

1. Начните с легких баррэ аккордов

Для того, чтобы изучить баррэ технику, стоит начать с легких баррэ аккордов. Например, можно начать с аккордов C, D, и E на первом ладу. При изучении каждого нового баррэ аккорда старайтесь сосредоточиться на том, чтобы ваш палец сильно и равномерно нажимал на все струны на ладу.''', 
                'tts': '''Как изучить баррэ технику и баррэ аккорды?

1. Начните с легких баррэ аккордов

Для того, чтобы изучить баррэ технику, стоит начать с легких баррэ аккордов. Например, можно начать с аккордов C, D, и E на первом ладу. При изучении каждого нового баррэ аккорда старайтесь сосредоточиться на том, чтобы ваш палец сильно и равномерно нажимал на все струны на ладу.'''},
                {'text': '''2. Тренируйте свои пальцы

Чтобы получить хорошие результаты при игре баррэ техникой, вам нужно тренировать свои пальцы. Один из лучших способов – это играть масштабы. Например, вы можете начать с масштаба C-диез минор. Этот масштаб содержит несколько баррэ аккордов, которые можно играть на первом ладу гитары.''', 
                'tts': '''2. Тренируйте свои пальцы

Чтобы получить хорошие результаты при игре баррэ техникой, вам нужно тренировать свои пальцы. Один из лучших способов – это играть масштабы. Например, вы можете начать с масштаба C-диез минор. Этот масштаб содержит несколько баррэ аккордов, которые можно играть на первом ладу гитары.'''},
                {'text': '''3. Используйте правильную технику

Правильная техника игры на гитаре – это один из важнейших аспектов. При игре баррэ техникой вам нужно следить за тем, чтобы палец оказался на правильном месте на ладу, а также чтобы нажимал на все струны равномерно. Если вы играете баррэ аккорд на первом ладу, старайтесь убедиться, что ваш палец располагается ровно над первым ладом.''', 
                'tts': '''3. Используйте правильную технику

Правильная техника игры на гитаре – это один из важнейших аспектов. При игре баррэ техникой вам нужно следить за тем, чтобы палец оказался на правильном месте на ладу, а также чтобы нажимал на все струны равномерно. Если вы играете баррэ аккорд на первом ладу, старайтесь убедиться, что ваш палец располагается ровно над первым ладом.'''},
                {'text': '''4. Тренируйтесь регулярно

Для того, чтобы изучить баррэ технику и баррэ аккорды, вы должны тренироваться регулярно – хотя бы несколько раз в неделю. Не забывайте, что этот процесс займет некоторое время, и не стоит ожидать слишком быстрых результатов.''', 
                'tts': '''4. Тренируйтесь регулярно

Для того, чтобы изучить баррэ технику и баррэ аккорды, вы должны тренироваться регулярно – хотя бы несколько раз в неделю. Не забывайте, что этот процесс займет некоторое время, и не стоит ожидать слишком быстрых результатов.'''},
                {'text': '''5. Слушайте музыку

Баррэ аккорды встречаются практически во всех стилях музыки, поэтому слушайте музыку и обращайте внимание на то, как используются баррэ аккорды в композициях. Это поможет вам лучше понимать, как и где использовать эту технику при игре на гитаре.''', 
                'tts': '''5. Слушайте музыку

Баррэ аккорды встречаются практически во всех стилях музыки, поэтому слушайте музыку и обращайте внимание на то, как используются баррэ аккорды в композициях. Это поможет вам лучше понимать, как и где использовать эту технику при игре на гитаре.'''},
                {'text': '''6. Воспользуйтесь видеоуроками

Сегодня существует множество видеоуроков на тему баррэ техники и баррэ аккордов, которые помогут вам улучшить свои навыки игры на гитаре. Найдите известных музыкантов, записывающих уроки, и следуйте их инструкциям.''', 
                'tts': '''6. Воспользуйтесь видеоуроками

Сегодня существует множество видеоуроков на тему баррэ техники и баррэ аккордов, которые помогут вам улучшить свои навыки игры на гитаре. Найдите известных музыкантов, записывающих уроки, и следуйте их инструкциям.'''},
                {'text': '''7. Играйте с другими музыкантами

Когда вы овладеете базовыми навыками игры на гитаре, можете присоединиться к группе музыкантов, чтобы поиграть вместе. Игра в группе поможет вам усвоить новые техники и приобрести опыт.''', 
                'tts': '''7. Играйте с другими музыкантами

Когда вы овладеете базовыми навыками игры на гитаре, можете присоединиться к группе музыкантов, чтобы поиграть вместе. Игра в группе поможет вам усвоить новые техники и приобрести опыт.'''},
                {'text': '''Вывод

Баррэ аккорды и баррэ техника – это важные навыки, которые нужно освоить, если вы хотите играть на гитаре. Регулярная тренировка и использование правильной техники при игре баррэ техникой помогут вам стать лучшим гитаристом и сделают игру более привлекательной и интересной.''', 
                'tts': '''Вывод

Баррэ аккорды и баррэ техника – это важные навыки, которые нужно освоить, если вы хотите играть на гитаре. Регулярная тренировка и использование правильной техники при игре баррэ техникой помогут вам стать лучшим гитаристом и сделают игру более привлекательной и интересной.'''},
                
            ),
            (
                {'text': '''Соло игра на гитаре – это умение играть отдельные мелодии и заключительные гармонии на гитаре. Это одна из самых масштабных и красивых техник игры на гитаре, требующая от игрока навыков в исполнении музыки и чувство ритма. Давайте рассмотрим, как изучить соло игру на гитаре.''', 
                'tts': '''Соло игра на гитаре – это умение играть отдельные мелодии и заключительные гармонии на гитаре. Это одна из самых масштабных и красивых техник игры на гитаре, требующая от игрока навыков в исполнении музыки и чувство ритма. Давайте рассмотрим, как изучить соло игру на гитаре.'''},
                {'text': '''1. Научитесь играть основы

Перед тем, как начать изучение соло игры, вам нужно научиться играть основы игры на гитаре, включая аккорды, знание ладов, игру баррэ аккордов и технику пальцев. Это поможет вам понять, какие аккорды и ноты играть во время соло игры.''', 
                'tts': '''1. Научитесь играть основы

Перед тем, как начать изучение соло игры, вам нужно научиться играть основы игры на гитаре, включая аккорды, знание ладов, игру баррэ аккордов и технику пальцев. Это поможет вам понять, какие аккорды и ноты играть во время соло игры.'''},
                {'text': '''2. Изучите музыкальную теорию

Для того, чтобы создавать красивые и правильно звучащие соло, нужно знать музыкальную теорию. Необходимо понимать, что такое тональность, каждая нота какого лада, как они соотносятся друг с другом и т.д. Знание музыкальной теории позволит вам играть с меньшим количеством ошибок и создавать красивые мелодии.''', 
                'tts': '''2. Изучите музыкальную теорию

Для того, чтобы создавать красивые и правильно звучащие соло, нужно знать музыкальную теорию. Необходимо понимать, что такое тональность, каждая нота какого лада, как они соотносятся друг с другом и т.д. Знание музыкальной теории позволит вам играть с меньшим количеством ошибок и создавать красивые мелодии.'''},
                {'text': '''3. Слушайте музыку и разбирайте соло игры

Для того, чтобы улучшить свои навыки соло игры, слушайте музыку и разбирайте соло. Слушайте произведения разных музыкантов и разбирайте их сольные партии. Обращайте внимание на то, как использованы техники, на которых возведены соло. Например, можно обратить внимание на скорость движения пальцев, на фразировки, на терции и т.д.''', 
                'tts': '''3. Слушайте музыку и разбирайте соло игры

Для того, чтобы улучшить свои навыки соло игры, слушайте музыку и разбирайте соло. Слушайте произведения разных музыкантов и разбирайте их сольные партии. Обращайте внимание на то, как использованы техники, на которых возведены соло. Например, можно обратить внимание на скорость движения пальцев, на фразировки, на терции и т.д.'''},
                {'text': '''4. Тренируйте свои навыки

Для того, чтобы стать лучшим в соло игре на гитаре, нужно тренировать свои навыки. Начните с медленных упражнений, чтобы улучшить координацию и точность игры, затем постепенно увеличивайте скорость. Также можно использовать различные масштабы и аккорды, чтобы поиграть разнообразно.
''', 
                'tts': '''4. Тренируйте свои навыки

Для того, чтобы стать лучшим в соло игре на гитаре, нужно тренировать свои навыки. Начните с медленных упражнений, чтобы улучшить координацию и точность игры, затем постепенно увеличивайте скорость. Также можно использовать различные масштабы и аккорды, чтобы поиграть разнообразно.
'''},
                {'text': '''5. Используйте эффекты

При игре сольных партий на гитаре можно использовать различные эффекты, такие как дисторшн, вау-вау, флэнжер и т.д. Они создадут уникальное звучание и помогут сделать вашу игру более интересной. Однако не забывайте, что избыточное использование эффектов может снизить качество вашей игры.
''', 
                'tts': '''5. Используйте эффекты

При игре сольных партий на гитаре можно использовать различные эффекты, такие как дисторшн, вау-вау, флэнжер и т.д. Они создадут уникальное звучание и помогут сделать вашу игру более интересной. Однако не забывайте, что избыточное использование эффектов может снизить качество вашей игры.
'''},
                {'text': '''6. Играйте вместе с другими музыкантами

Игра в группе – это идеальный способ улучшить свои навыки игры на гитаре. Играть вместе с другими музыкантами поможет вам научиться играть в соответствии с другими инструментами и улучшить чувство ритма. Попробуйте найти группу, в которой вы могли бы играть с другими музыкантами и развиваться вместе с ними.
''', 
                'tts': '''6. Играйте вместе с другими музыкантами

Игра в группе – это идеальный способ улучшить свои навыки игры на гитаре. Играть вместе с другими музыкантами поможет вам научиться играть в соответствии с другими инструментами и улучшить чувство ритма. Попробуйте найти группу, в которой вы могли бы играть с другими музыкантами и развиваться вместе с ними.
'''},
                {'text': '''Вывод

Соло игра на гитаре – это прекрасная техника, позволяющая играть красивые и запоминающиеся мелодии. Однако это требует работы, терпения и регулярных тренировок. Следуя советам выше, вы сможете улучшить свои навыки игры на гитаре и создавать красивые соло партии.''', 
                'tts': '''Вывод

Соло игра на гитаре – это прекрасная техника, позволяющая играть красивые и запоминающиеся мелодии. Однако это требует работы, терпения и регулярных тренировок. Следуя советам выше, вы сможете улучшить свои навыки игры на гитаре и создавать красивые соло партии.'''},   
            ),
            (
                {'text': '''Игра на электрогитаре – это одна из наиболее интересных техник игры на гитаре. Существует множество различных звуков и техник, которые можно использовать при игре на электрогитаре. Давайте рассмотрим, как можно изучить игру на электрогитаре.
''', 
                'tts': '''Игра на электрогитаре – это одна из наиболее интересных техник игры на гитаре. Существует множество различных звуков и техник, которые можно использовать при игре на электрогитаре. Давайте рассмотрим, как можно изучить игру на электрогитаре.
'''},
                {'text': '''1. Настройте гитару

Перед тем, как начать играть на электрогитаре, необходимо правильно настроить ее. Это позволит получить оптимальное звучание и избежать ненужных помех. С помощью тюнера или приложения для настройки можно легко настроить гитару в соответствии с нужным звуком.''', 
                'tts': '''1. Настройте гитару

Перед тем, как начать играть на электрогитаре, необходимо правильно настроить ее. Это позволит получить оптимальное звучание и избежать ненужных помех. С помощью тюнера или приложения для настройки можно легко настроить гитару в соответствии с нужным звуком.'''},
                {'text': '''2. Изучите основы

Перед тем, как начинать играть на электрогитаре, необходимо изучить основы игры на гитаре. Это включает в себя изучение аккордов, ладов, техники баррэ, скрипки и другие элементы, которые требуются для игры на гитаре. Это поможет вам понимать и использовать различные звуки и техники при игре на электрогитаре.
''', 
                'tts': '''2. Изучите основы

Перед тем, как начинать играть на электрогитаре, необходимо изучить основы игры на гитаре. Это включает в себя изучение аккордов, ладов, техники баррэ, скрипки и другие элементы, которые требуются для игры на гитаре. Это поможет вам понимать и использовать различные звуки и техники при игре на электрогитаре.
'''},
                {'text': '''3. Изучите различные эффекты

Одной из главных причин, по которой игроки переходят на электрогитары, является возможность использования различных эффектов в звуке. Начните с простых и широко используемых эффектов, таких как дисторшн, овердрайв, чистый звук и т.д. Постепенно улучшайте свои навыки и добавляйте новые эффекты в игру.''', 
                'tts': '''3. Изучите различные эффекты

Одной из главных причин, по которой игроки переходят на электрогитары, является возможность использования различных эффектов в звуке. Начните с простых и широко используемых эффектов, таких как дисторшн, овердрайв, чистый звук и т.д. Постепенно улучшайте свои навыки и добавляйте новые эффекты в игру.'''},
                {'text': '''4. Изучите ритм

Ритм – это основа любого музыкального произведения. Изучение ритма позволит вам правильно играть в компании с другими музыкантами, улучшить свою технику и чувствуемость. Для этого можно использовать гитарные барабаны, метрономы или играть вместе с другими музыкантами.''', 
                'tts': '''4. Изучите ритм

Ритм – это основа любого музыкального произведения. Изучение ритма позволит вам правильно играть в компании с другими музыкантами, улучшить свою технику и чувствуемость. Для этого можно использовать гитарные барабаны, метрономы или играть вместе с другими музыкантами.'''},
                {'text': '''5. Обращайте внимание на акустику

Акустика – это важнейший аспект, который нужно учитывать при игре на электрогитаре. Регулируйте громкость, баланс между басом и тембрами, настройте тембр и убедитесь, что звучание соответствует вашим требованиям и общей идее музыкального произведения.''', 
                'tts': '''5. Обращайте внимание на акустику

Акустика – это важнейший аспект, который нужно учитывать при игре на электрогитаре. Регулируйте громкость, баланс между басом и тембрами, настройте тембр и убедитесь, что звучание соответствует вашим требованиям и общей идее музыкального произведения.'''},
                {'text': '''6. Упражняйтесь в игре на электрогитаре

Для того, чтобы стать хорошим музыкантом, нужно заниматься регулярно. Упражняйтесь в игре на электрогитаре каждый день в течение определенного периода времени. Улучшение техники и звучания занимает время и требует постоянных трудов.''', 
                'tts': '''6. Упражняйтесь в игре на электрогитаре

Для того, чтобы стать хорошим музыкантом, нужно заниматься регулярно. Упражняйтесь в игре на электрогитаре каждый день в течение определенного периода времени. Улучшение техники и звучания занимает время и требует постоянных трудов.'''},
                {'text': '''7. Смотрите уроки и играйте с другими музыкантами

Сегодня существует множество ресурсов, на которых можно найти уроки по игре на электрогитаре. Смотрите видеоуроки, изучайте различные техники игры на гитаре, обращайте внимание на звук и общие требования к звучанию. Не забывайте играть с другими музыкантами, поскольку это поможет вам улучшить свои навыки и создать свой собственный звук.''', 
                'tts': '''7. Смотрите уроки и играйте с другими музыкантами

Сегодня существует множество ресурсов, на которых можно найти уроки по игре на электрогитаре. Смотрите видеоуроки, изучайте различные техники игры на гитаре, обращайте внимание на звук и общие требования к звучанию. Не забывайте играть с другими музыкантами, поскольку это поможет вам улучшить свои навыки и создать свой собственный звук.'''},
                {'text': '''Вывод

Игра на электрогитаре – это удивительное умение, которое требует знаний в области игры на гитаре, эффектов, ритма и акустики. Следуя указанным выше советам, вы сможете изучить игру на электрогитаре и создавать красивую музыку на своей гитаре.''', 
                'tts': '''Вывод

Игра на электрогитаре – это удивительное умение, которое требует знаний в области игры на гитаре, эффектов, ритма и акустики. Следуя указанным выше советам, вы сможете изучить игру на электрогитаре и создавать красивую музыку на своей гитаре.'''},
                
            ),
        ),
        'high': (
            (
                {'text': '''Игра в разных тональностях на гитаре позволяет разнообразить музыкальное исполнение и расширить возможности инструмента. В данном уроке мы рассмотрим базовые принципы игры в разных тональностях на гитаре.''', 
                'tts': '''Игра в разных тональностях на гитаре позволяет разнообразить музыкальное исполнение и расширить возможности инструмента. В данном уроке мы рассмотрим базовые принципы игры в разных тональностях на гитаре.'''},
                {'text': '''
1. Что такое тональность?

Тональность – это свойство музыкальной композиции, определяемое высотой звука основной ноты. Она задает характер композиции и ее музыкальное содержание. Музыкальный материал, используемый в тональности, состоит из семи нот, которые образуют диатоническую шкалу – основу музыкального языка.
''', 
                'tts': '''
1. Что такое тональность?

Тональность – это свойство музыкальной композиции, определяемое высотой звука основной ноты. Она задает характер композиции и ее музыкальное содержание. Музыкальный материал, используемый в тональности, состоит из семи нот, которые образуют диатоническую шкалу – основу музыкального языка.
'''},
                {'text': '''2. Как определить тональность композиции?

На гитаре определить тональность композиции можно по ее аккордам. Каждый аккорд имеет свой тонический звук, который определяет тональность. Например, если в композиции присутствуют аккорды C, F и G, то мы можем сделать вывод, что это композиция в тональности C.''', 
                'tts': '''2. Как определить тональность композиции?

На гитаре определить тональность композиции можно по ее аккордам. Каждый аккорд имеет свой тонический звук, который определяет тональность. Например, если в композиции присутствуют аккорды C, F и G, то мы можем сделать вывод, что это композиция в тональности C.'''},
                {'text': '''3. Как играть в разных тональностях на гитаре?

Игра в разных тональностях на гитаре осуществляется путем изменения основной ноты, к которой настраивается инструмент. Для этого существует несколько вариантов:

- Использование каподастр – это устройство, которое заклинивает струны на любом ладу, что позволяет изменять высоту звучания гитары. Например, если мы играем в тональности C, то на втором ладу каподастр мы играем в тональности D, на третьем ладу – в тональности E и т.д.
- Использование аккордовых форм на разных ладах – это вариант, когда мы играем аккорды на разных ладах инструмента, что позволяет изменять тональность. Например, в тональности C мы можем играть аккорды C, Am, F и G на первом ладу, а в тональности D – на втором ладу.
- Использование транспозиции – это перенос всей композиции на другую тональность. Для этого нужно знать музыкальную теорию и уметь переносить аккорды на другие тональности.''', 
                'tts': '''3. Как играть в разных тональностях на гитаре?

Игра в разных тональностях на гитаре осуществляется путем изменения основной ноты, к которой настраивается инструмент. Для этого существует несколько вариантов:

- Использование каподастр – это устройство, которое заклинивает струны на любом ладу, что позволяет изменять высоту звучания гитары. Например, если мы играем в тональности C, то на втором ладу каподастр мы играем в тональности D, на третьем ладу – в тональности E и т.д.
- Использование аккордовых форм на разных ладах – это вариант, когда мы играем аккорды на разных ладах инструмента, что позволяет изменять тональность. Например, в тональности C мы можем играть аккорды C, Am, F и G на первом ладу, а в тональности D – на втором ладу.
- Использование транспозиции – это перенос всей композиции на другую тональность. Для этого нужно знать музыкальную теорию и уметь переносить аккорды на другие тональности.'''},
                {'text': '''4. Как применять игру в разных тональностях на гитаре в музыке?

Игра в разных тональностях на гитаре может использоваться для различных целей:

- Расширение музыкальных возможностей инструмента.
- Создание новых аранжировок для известных композиций.
- Создание новых композиций с использованием разных тональностей.

При игре в различных тональностях на гитаре нужно быть внимательным к звучанию инструмента. Изменение высоты звучания может повлиять на тембр и общее звучание гитары. Поэтому важно правильно настроить инструмент и следить за его звучанием в процессе игры.''', 
                'tts': '''4. Как применять игру в разных тональностях на гитаре в музыке?

Игра в разных тональностях на гитаре может использоваться для различных целей:

- Расширение музыкальных возможностей инструмента.
- Создание новых аранжировок для известных композиций.
- Создание новых композиций с использованием разных тональностей.

При игре в различных тональностях на гитаре нужно быть внимательным к звучанию инструмента. Изменение высоты звучания может повлиять на тембр и общее звучание гитары. Поэтому важно правильно настроить инструмент и следить за его звучанием в процессе игры.'''},
                {'text': '''Игра в разных тональностях на гитаре – это отличный способ расширить музыкальный репертуар и развить игровые навыки. При этом важно помнить о правильной настройке гитары и о технике игры, чтобы достичь наилучшего звучания.''', 
                'tts': '''Игра в разных тональностях на гитаре – это отличный способ расширить музыкальный репертуар и развить игровые навыки. При этом важно помнить о правильной настройке гитары и о технике игры, чтобы достичь наилучшего звучания.'''},
                

            ),
            (
                {'text': '''Игра с помощью педали фузз на гитаре позволяет получать новые звуковые эффекты и расширять музыкальные возможности инструмента. В этом уроке мы рассмотрим базовые принципы игры с помощью педали фузз.''', 
                'tts': '''Игра с помощью педали фузз на гитаре позволяет получать новые звуковые эффекты и расширять музыкальные возможности инструмента. В этом уроке мы рассмотрим базовые принципы игры с помощью педали фузз.'''},
                {'text': '''1. Что такое педаль фузз?

Педаль фузз - это гитарный эффект, позволяющий изменять звук гитары, смещать тон в искаженную область и сохранять его пробирающуюся атаку.
''', 
                'tts': '''1. Что такое педаль фузз?

Педаль фузз - это гитарный эффект, позволяющий изменять звук гитары, смещать тон в искаженную область и сохранять его пробирающуюся атаку.
'''},
                {'text': '''2. Состав и принцип работы педали фузз

Педаль фузз состоит из нескольких элементов:

- Входной джек
- Кнопки управления звуком и настроек
- Кнопка включения и выключения
- Усилитель
- Диоды
- Фильтр низких частот

Принцип работы педали фузз заключается в том, что она направляет сигнал гитары в усилитель, который увеличивает его силу. Это приводит к перегрузке сигнала и изменению его звучания. Диоды встроенные в устройство помогают фильтровать высокие частоты, что придает звучанию более сырой энергии.''', 
                'tts': '''2. Состав и принцип работы педали фузз

Педаль фузз состоит из нескольких элементов:

- Входной джек
- Кнопки управления звуком и настроек
- Кнопка включения и выключения
- Усилитель
- Диоды
- Фильтр низких частот

Принцип работы педали фузз заключается в том, что она направляет сигнал гитары в усилитель, который увеличивает его силу. Это приводит к перегрузке сигнала и изменению его звучания. Диоды встроенные в устройство помогают фильтровать высокие частоты, что придает звучанию более сырой энергии.'''},
                {'text': '''3. Как использовать педаль фузз?

Использование педали фузз на гитаре может быть разным. Она может применяться для создания альтернативных звуков в жанрах, таких как рок, гараж и блюз, а также для добавления эффектов к существующим композициям. Основные шаги для использования педали фузз:

- Подключите гитару к педали, затем от педали к усилителю.
- Включите педаль. При этом убедитесь, что ее настройки соответствуют желаемому звучанию.
- Передвигайте ручки управления звуком на педали, чтобы получить нужный звуковой эффект.
- Играйте, наслаждаясь эффектом, который создает педаль фузз.''', 
                'tts': '''3. Как использовать педаль фузз?

Использование педали фузз на гитаре может быть разным. Она может применяться для создания альтернативных звуков в жанрах, таких как рок, гараж и блюз, а также для добавления эффектов к существующим композициям. Основные шаги для использования педали фузз:

- Подключите гитару к педали, затем от педали к усилителю.
- Включите педаль. При этом убедитесь, что ее настройки соответствуют желаемому звучанию.
- Передвигайте ручки управления звуком на педали, чтобы получить нужный звуковой эффект.
- Играйте, наслаждаясь эффектом, который создает педаль фузз.'''},
                {'text': '''4. Советы по использованию педали фузз

- Начинайте с низких настроек и увеличивайте их, чтобы получить нужный звук. Не увлекайтесь перегруженным звука фузз, так как вы можете потерять атаку.
- Используйте педаль фузз с многоканальными усилителями. Это позволит играть в разных настройках, без необходимости регулировки педали.
- Используйте педаль фузз в меру, она может давать неожиданный и экспериментальный звук, но в больших дозах может перегрузить звучание гитары.''', 
                'tts': '''4. Советы по использованию педали фузз

- Начинайте с низких настроек и увеличивайте их, чтобы получить нужный звук. Не увлекайтесь перегруженным звука фузз, так как вы можете потерять атаку.
- Используйте педаль фузз с многоканальными усилителями. Это позволит играть в разных настройках, без необходимости регулировки педали.
- Используйте педаль фузз в меру, она может давать неожиданный и экспериментальный звук, но в больших дозах может перегрузить звучание гитары.'''},
                {'text': '''Игра с помощью педали фузз - это отличный способ добавить насыщенности и звуковой эффект к инструменту. Подходящая настройка поможет раскрыть новые возможности и творческие решения в музыке.''', 
                'tts': '''Игра с помощью педали фузз - это отличный способ добавить насыщенности и звуковой эффект к инструменту. Подходящая настройка поможет раскрыть новые возможности и творческие решения в музыке.'''},
                

            ),
            (
                {'text': '''Игра в различных стилях на гитаре позволяет расширить музыкальные возможности инструмента и достичь нового уровня в игре. В этом уроке мы рассмотрим базовые принципы игры в разных стилях на гитаре.''', 
                'tts': '''Игра в различных стилях на гитаре позволяет расширить музыкальные возможности инструмента и достичь нового уровня в игре. В этом уроке мы рассмотрим базовые принципы игры в разных стилях на гитаре.'''},
                {'text': '''1. Что такое стили на гитаре?

Стили на гитаре - это жанры и техники игры, которые используется в разных музыкальных направлениях. Каждый стиль имеет свои особенности в звучании и технике игры.''', 
                'tts': '''1. Что такое стили на гитаре?

Стили на гитаре - это жанры и техники игры, которые используется в разных музыкальных направлениях. Каждый стиль имеет свои особенности в звучании и технике игры.'''},
                {'text': '''2. Как играть в разных стилях на гитаре?

Для игры в разных стилях на гитаре существует несколько способов:

- Изучение основных техник игры в стиле, который вам интересен. Например, для игры в классическом стиле важно знать технику легато и арпеджио, а для игры в стиле блюз - технику бенда и аккордовых форм.
- Изучение аккордов и соло композиций в стиле, который вы хотите освоить. Начните с простых композиций и постепенно переходите к более сложным.
- Слушайте жанры музыки, на которые вы хотите ориентироваться. Это поможет вам понять особенности звучания и стиля.''', 
                'tts': '''2. Как играть в разных стилях на гитаре?

Для игры в разных стилях на гитаре существует несколько способов:

- Изучение основных техник игры в стиле, который вам интересен. Например, для игры в классическом стиле важно знать технику легато и арпеджио, а для игры в стиле блюз - технику бенда и аккордовых форм.
- Изучение аккордов и соло композиций в стиле, который вы хотите освоить. Начните с простых композиций и постепенно переходите к более сложным.
- Слушайте жанры музыки, на которые вы хотите ориентироваться. Это поможет вам понять особенности звучания и стиля.'''},
                {'text': '''3. Примеры различных стилей на гитаре

- Рок - это стиль игры, характеризующийся сильной драйвовостью и энергетикой в звучании. В этом стиле используется много мощных баррэ звуков и гитарных соло.
- Блюз - этот стиль характеризуется использованием душевных мелодий и гармоний. В нем используется техника арпеджио и бенда.
- Классическая музыка - это стиль, характеризующийся плавными и мелодичными звучаниями гитары. В нем используются специальные техники игры, такие как легато и арпеджио.
- Джаз - это стиль игры, характеризующийся чередованием комплексных гармоний с мелодичными линиями. Это требует большой технической выверенности и точности в игре.
- Фанк - это стиль игры, характеризующийся использованием стоп и интроспектацией, а также комплексным расположением аккордов.''', 
                'tts': '''3. Примеры различных стилей на гитаре

- Рок - это стиль игры, характеризующийся сильной драйвовостью и энергетикой в звучании. В этом стиле используется много мощных баррэ звуков и гитарных соло.
- Блюз - этот стиль характеризуется использованием душевных мелодий и гармоний. В нем используется техника арпеджио и бенда.
- Классическая музыка - это стиль, характеризующийся плавными и мелодичными звучаниями гитары. В нем используются специальные техники игры, такие как легато и арпеджио.
- Джаз - это стиль игры, характеризующийся чередованием комплексных гармоний с мелодичными линиями. Это требует большой технической выверенности и точности в игре.
- Фанк - это стиль игры, характеризующийся использованием стоп и интроспектацией, а также комплексным расположением аккордов.'''},
                {'text': '''4. Советы для игры в разных стилях на гитаре

- Изучайте основы каждого стиля перед тем, как переходить к более сложным композициям.
- Постепенно ускоряйте темп своей игры в новом стиле, чтобы привыкнуть к новым ритмам и звучаниям.
- Используйте разные инструменты гитары, такие как пальцы и иглу, чтобы создавать разные эффекты звука.
- Практикуйте регулярно, чтобы улучшить свою технику и достигнуть успеха в игре в различных стилях.''', 
                'tts': '''4. Советы для игры в разных стилях на гитаре

- Изучайте основы каждого стиля перед тем, как переходить к более сложным композициям.
- Постепенно ускоряйте темп своей игры в новом стиле, чтобы привыкнуть к новым ритмам и звучаниям.
- Используйте разные инструменты гитары, такие как пальцы и иглу, чтобы создавать разные эффекты звука.
- Практикуйте регулярно, чтобы улучшить свою технику и достигнуть успеха в игре в различных стилях.'''},
                {'text': '''Игра в различных стилях на гитаре может быть трудной, но это также и эмоционально насыщенный опыт. Чем больше вы играете и практикуете, тем больше вы достигнете успеха в различных стилях на гитаре.''', 
                'tts': '''Игра в различных стилях на гитаре может быть трудной, но это также и эмоционально насыщенный опыт. Чем больше вы играете и практикуете, тем больше вы достигнете успеха в различных стилях на гитаре.'''},
            ),
        )}
    }

    keyboardFakts = [
                        {
                            "title": "О программировании",
                            "payload": 'buttonProgs',
                            "hide": 'false'
                        },
                        {
                            "title": "О рисовании",
                            "payload": 'buttonPaints',
                            "hide": 'false'
                        },
                        {
                            "title": "О кулинарии",
                            "payload": 'buttonBakers',
                            "hide": 'false'
                        },
                        {
                            "title": "О гитаре",
                            "payload": 'buttonGitars',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]
    keyboardFaktsTitles = [list(i.values())[0].lower() for i in keyboardFakts]
    keyboardInfo =  [
                        {
                            "title": "Откуда навык берет информацию?",
                            "payload": 'buttonInfoFrom',
                            "hide": 'false'
                        },
                        {
                            "title": "Чему сейчас можно научиться?",
                            "payload": 'buttonWhatCanLearn',
                            "hide": 'false'
                        },
                        {
                            "title": "Связь с разработчиками",
                            "payload": 'buttonCreaters',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]
    keyboardInfoTitles = [list(i.values())[0].lower() for i in keyboardInfo]
    keyboardMenu = [
                        {
                            "title": "Интересные факты",
                            "payload": 'buttonFakts',
                            "hide": 'false'
                        },
                        {
                            "title": "Информация",
                            "payload": 'buttonInfo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        #{
                        #    "title": "0",
                        #    "payload": 'button0',
                        #    "hide": 'false'
                        #},
                        
                        {
                            "title": "Хочу начать заниматься!",
                            "payload": 'buttonStartLessons',
                            "hide": 'false'
                        }
                    ]
    
    keyboardNext = [
                        {
                            "title": "Дальше",
                            "payload": 'buttonNext',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                        
                    ]

    keyboardLessonContinue = [
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Да",
                            "payload": 'buttonYesOfContinue',
                            "hide": 'false'
                        },
                        {
                            "title": "Нет",
                            "payload": 'buttonNoOfContinue',
                            "hide": 'false'
                        }
                    ]
    keyboardLessonContinueTitles = [list(i.values())[0].lower() for i in keyboardLessonContinue]
    keyboardWhatWeCanLearn = [
                        {
                            "title": "Программировать",
                            "payload": 'buttonWantProgramming',
                            "hide": 'false'
                        },
                        {
                            "title": "Рисовать",
                            "payload": 'buttonWantPainting',
                            "hide": 'false'
                        },
                        {
                            "title": "Готовить",
                            "payload": 'buttonWantCoking',
                            "hide": 'false'
                        },
                        {
                            "title": "Играть на гитаре",
                            "payload": 'buttonWantGuitar',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]
    keyboardWhatWeCanLearnTitles = [list(i.values())[0].lower() for i in keyboardWhatWeCanLearn]
    keyboardLevels = [
                        {
                            "title": "Легкая",
                            "payload": 'buttonLevelEasy',
                            "hide": 'false'
                        },
                        {
                            "title": "Средняя",
                            "payload": 'buttonLevelMedium',
                            "hide": 'false'
                        },
                        {
                            "title": "Сложная",
                            "payload": 'buttonWantHigh',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]
    keyboardTextOrVideo = [
                        {
                            "title": "Текстовый",
                            "payload": 'buttonText',
                            "hide": 'false'
                        },
                        {
                            "title": "Видео",
                            "payload": 'buttonVideo',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]

    keyboardNextLessonOrMenu = [
                        {
                            "title": "Следующий урок",
                            "payload": 'buttonNextLesson',
                            "hide": 'false'
                        },
                        {
                            "title": "Что ты умеешь?",
                            "payload": 'buttonWhatYouCanDo',
                            "hide": 'false'
                        },
                        {
                            "title": "Помощь",
                            "payload": 'buttonHelp',
                            "hide": 'false'
                        },
                        {
                            "title": "Меню",
                            "payload": 'MainMenu',
                            "hide": 'false'
                        }
                    ]
    keyboardNextLessonOrMenuTitles = [list(i.values())[0].lower() for i in keyboardNextLessonOrMenu]


    if 'request' in event and \
            'original_utterance' in event['request'] \
            and len(event['request']['original_utterance']) > 0:
        usertext = event['request']['original_utterance'].lower()
    else:
        usertext = '----------------------------------------------------------'
    if 'value' in event['state']['user']:
        state = event['state']['user']['value']
    else:
        state = 0
    if state != 0:
        jointext = 'Добро пожаловать снова!'
    if state.__class__ != int:
        if 'video' in state or 'text' in state:
            if 'easy' in state or 'medium' in state or 'high' in state:
                if len(state.split()) >= 4:
                    keyboardMenu.append({
                    "title": "Продолжить последний урок",
                    "payload": 'buttonYesOfContinue',
                    "hide": 'false'
                    })

    if 'request' in event and "payload" in event['request']:
        payload = event['request']["payload"]
    else:
        payload = None
    
    if payload is None and ('зан' in usertext or 'уч' in usertext or 'начат' in usertext or 'изуч' in usertext or 'зна' in usertext or 'хоч' in usertext) and ('чем' in usertext or 'что' in usertext):
        payload = 'buttonWhatYouCanDo'
        usertext = '----------------------------------------------------------'

    if payload is None and 'факт' in usertext:
        if 'прог' in usertext:
            payload = 'buttonProgs'
        elif 'рис' in usertext or 'карт' in usertext or 'писа' in usertext:
            payload = 'buttonPaints'
        elif 'кулин' in usertext or 'готов' in usertext or 'кушат' in usertext:
            payload = 'buttonBakers'
        elif 'гитар' in usertext or 'музык' in usertext or 'игр' in usertext:
            payload = 'buttonGitars'
        else:
            payload = 'buttonFakts'
        usertext = '----------------------------------------------------------'
    
    #'buttonWantCoking' 'buttonWantGuitar' 'buttonWantPainting' 'buttonWantProgramming'

    elif payload is None and ('зан' in usertext or 'уч' in usertext or 'начат' in usertext or 'изуч' in usertext or 'зна' in usertext or 'хоч' in usertext):
        if ('прог' in usertext):
            payload = 'buttonWantProgramming'
        elif ('рис' in usertext or 'писа' in usertext or 'карт' in usertext):
            payload = 'buttonWantPainting'
        elif ('кулин' in usertext or 'готов' in usertext or 'кушат' in usertext):
            payload = 'buttonWantCoking'
        elif ('гитар' in usertext or 'музык' in usertext or 'игр' in usertext):
            payload = 'buttonWantGuitar'
        else:
            payload = 'buttonStartLessons'
        usertext = '----------------------------------------------------------'

    

    if payload == 'MainMenu' or 'меню' in usertext:
            return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'Вы вышли в меню!',
                    'buttons': keyboardMenu,
                    # Don't finish the session after this response.
                    
                    'end_session': 'false'
                    
                }
            }
    elif payload == 'buttonHelp' or 'помо' in usertext:
        text = 'Навык создан для обучения разным популярным видам деятельности. Здесь можно научится и как играть на гитаре, так и программировать на популярном языке Python. Кроме этого Вам доступны уроки по кулинарии и рисованию. Благодаря этим урокам Вы сможете удивить своих друзей и коллег, а также это будет полезно в повседневной жизни. Начать уроки - скажите " Хочу начать заниматься!". Также можно сразу сказать чем именно хотите заниматься, например: "Хочу научится рисовать" и выбрать сложность урока. Кроме того можно узнать несколько интересных расскажи интересные факты по каждой представленной теме. Для этого необходимо сказать: "Расскажи интересные факты" либо сразу "Расскажи интересные факты про программирование". Если у Вас вдруг остались вопросы - скажите "Дай информацию о навыке". В любой момент не стесняйте сказать "Помоги мне". А самое главное, Ваш прогресс сохраняется, при выходе из навыка не бойтесь, что Вам придется проходить уроки вновь. Если всё понятно, давайте начинать!'
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': text,
                    'buttons': keyboardMenu,
                    # Don't finish the session after this response.
                    
                    'end_session': 'false'
                    
                }
        
            }
    elif payload == 'buttonWhatYouCanDo' or ('что' in usertext and 'умее' in usertext):
        text = choice(['Я умею обучать людей новым навыкам с помощью увлекательных и познавательных текстовых и видеоуроков. Кроме того, могу рассказать полезные факты о выбранной теме. Выбирайте, чем хотите заняться и начнём изучать это шаг за шагом!',
                       'Я могу научить Вас нескольким темам либо рассказать парочку интересных фактов. Начнём?'])
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': text,
                    'buttons': keyboardMenu,
                    # Don't finish the session after this response.
                    
                    'end_session': 'false'
                    
                }
            }
    
    elif payload == 'buttonFakts' or 'интересные факты' in usertext:
        text = "Факты о чем вы бы хотели узнать?"
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': text,
                'buttons': keyboardFakts,
                # Don't finish the session after this response.
                'end_session': 'false'
            }
        }
    elif payload == 'button0':
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': 'Обнуление',
                # Don't finish the session after this response.
                'end_session': 'true'
            },
            "user_state_update": {
                    "value": 0
                }
        }
    elif payload == 'buttonInfo' or 'инфор' in usertext:
        text = "Какая информация вас интересует?"
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': text,
                'buttons': keyboardInfo,
                # Don't finish the session after this response.
                'end_session': 'false'
            }
        }
    elif payload in ('buttonProgs', 'buttonPaints', 'buttonBakers', 'buttonGitars') or usertext in keyboardFaktsTitles:
        if not payload:
            payload = keyboardFakts[keyboardFaktsTitles.index(usertext)]['payload']
        r = randint(0, 3)
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    'text': fakts[payload][r]['text'],
                    'buttons': keyboardFakts,
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    "card": {
                        "type": "BigImage",
                        "image_id": fakts[payload][r]['image_id'],
                        "description": fakts[payload][r]['text']
                    },
                    # Don't finish the session after this response.
                    'end_session': 'false'
                }
        }
        """
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': fakts[payload][r]['text'],
                    'buttons': keyboardFakts,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                },
                "user_state_update": {
                    "value": 3
                }
            }
        """
    elif payload in ('buttonInfoFrom', 'buttonWhatCanLearn', 'buttonCreaters') or usertext in keyboardInfoTitles:
        if not payload:
            payload = keyboardInfo[keyboardInfoTitles.index(usertext)]['payload']
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': infos[payload],
                    'buttons': keyboardInfo,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                }
            }
    
    
        '''
    elif payload == 'buttonStartLessons' or 'хочу начать заниматься' in usertext:
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'Начал ли пользователь изучать какой либо материал?',
                    'buttons': keyboardStartLesson,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                },
                "user_state_update": {
                    "value": 3
                }
            }
        '''

    elif payload == 'buttonStartLessons' or 'хочу начать заниматься' in usertext:
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'Чему бы Вы хотели научиться?',
                    'buttons': keyboardWhatWeCanLearn,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                },
                "user_state_update": {
                    "value": 3
                }
            }
    
    elif payload in ('buttonWantProgramming', 'buttonWantPainting', 'buttonWantCoking', 'buttonWantGuitar') or usertext in keyboardWhatWeCanLearnTitles:
        if not payload:
            payload = keyboardWhatWeCanLearn[keyboardWhatWeCanLearnTitles.index(usertext)]['payload']
        states = {
            'buttonWantProgramming': 'pr',
            'buttonWantPainting': 'paint',
            'buttonWantCoking': 'cooking',
            'buttonWantGuitar': 'guitar'
        }
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'А теперь выберите сложность программы',
                    'buttons': keyboardLevels,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                },
                "user_state_update": {
                    "value": states[payload]
                }
            }
    
    elif payload in ('buttonLevelEasy', 'buttonLevelMedium', 'buttonWantHigh') or 'легк' in usertext or 'слож' in usertext or 'сред' in usertext or 'изи' in usertext or 'слаб' in usertext or 'мин' in usertext  or 'макс' in usertext: 
        if not payload:
            if 'слаб' in usertext or 'изи' in usertext or 'легк' in usertext or 'мин' in usertext:
                payload = 'buttonLevelEasy'
            elif 'сред' in usertext:
                payload = 'buttonLevelMedium'
            elif 'слож' in usertext or 'макс' in usertext:
                payload = 'buttonWantHigh'
        states = {
            'buttonLevelEasy': 'easy',
            'buttonLevelMedium': 'medium',
            'buttonWantHigh': 'high',
        }   
        splitedState = state.split()
        if len(splitedState) == 1:
            lesson = splitedState
            state = f'{lesson[0]} {states[payload]}'
        elif len(splitedState) == 2:
            lesson, level = splitedState
            state = f'{lesson} {states[payload]}'
        elif len(splitedState) == 3:
            lesson, level, typeOfLesson = splitedState
            state = f'{lesson} {states[payload]} {typeOfLesson}'
        elif len(splitedState) == 4:
            lesson, level, typeOfLesson, numberOfLesson = splitedState
            state = f'{lesson} {states[payload]} {typeOfLesson} {numberOfLesson}'
        elif len(splitedState) == 5:
            lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = splitedState
            state = f'{lesson} {states[payload]} {typeOfLesson} {numberOfLesson} {numberOfDialog}'
        return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'Текстовые или видео уроки?',
                    'buttons': keyboardTextOrVideo,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                },
                "user_state_update": {
                    "value": state
                }
            }
    elif payload in ('buttonText', 'buttonVideo') or 'текс' in usertext or 'вид' in usertext:
        if not payload:
            if 'текс' in usertext:
                payload = 'buttonText'
            elif 'вид' in usertext:
                payload = 'buttonVideo'
        states = {
            'buttonText': 'text',
            'buttonVideo': 'video',
        }
        #state = f'{state} {states[payload]}'
        splitedState = state.split()
        if len(splitedState) == 2:
            lesson, level = splitedState
            if states[payload] == 'text':
                state = f'{lesson} {level} {states[payload]} 0 0'
            else:
                state = f'{lesson} {level} {states[payload]} 0'
        elif len(splitedState) == 3:
            lesson, level, typeOfLesson = splitedState
            if states[payload]== 'text':
                state = f'{lesson} {level} {states[payload]} 0 0'
            else:
                state = f'{lesson} {level} {states[payload]} 0'
        elif len(splitedState) == 4:
            lesson, level, typeOfLesson, numberOfLesson = splitedState
            if states[payload] == 'text':
                state = f'{lesson} {level} {states[payload]} {numberOfLesson} 0'
            else:
                state = f'{lesson} {level} {states[payload]} {numberOfLesson}'
        elif len(splitedState) == 5:
            lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = splitedState
            state = f'{lesson} {level} {states[payload]} {numberOfLesson} {numberOfDialog}'
        if payload == 'buttonVideo':

            #                                 номер урока
            #text = (описание урока, ссылка на видео)
            return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': videoLessons[lesson][level][0]['text'],
                    'buttons': keyboardNextLessonOrMenu,
                    "card": {
                        "type": "BigImage",
                        "image_id": videoLessons[lesson][level][0]['image_id'],
                        "description": videoLessons[lesson][level][0]['text'],
                        "title": 'Нажми на картинку для перехода к видео',
                        "button": {
                            "url": videoLessons[lesson][level][0]['url'],
                            "payload": {}
                        }
                    },
                    # Don't finish the session after this response.
                    'end_session': 'false'
                
                },
                "user_state_update": {
                    "value": state
                }
            }
        elif payload == 'buttonText':
            #text = (описание урока, ссылка на видео)
            return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': textLessons[lesson][level][0][0]['text'],
                    'tts': textLessons[lesson][level][0][0]['tts'],
                    'buttons': keyboardNext,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                
                },
                "user_state_update": {
                    "value": state
                }
            }
    elif payload in ('buttonYesOfContinue', 'buttonNoOfContinue') or usertext in keyboardLessonContinueTitles:
        if not payload:
            payload = keyboardLessonContinue[keyboardLessonContinueTitles.index(usertext)]['payload']
        if payload == 'buttonNoOfContinue':
            return {
                'version': event['version'],
                'session': event['session'],
                'response': {
                    # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                    'text': 'Главное меню',
                    'buttons': keyboardMenu,
                    # Don't finish the session after this response.
                    'end_session': 'false'
                
                },
                "user_state_update": {
                    "value": 3
                }
            }
        elif payload == 'buttonYesOfContinue':
            splitedState = state.split()
            if splitedState[2] == 'video':
                lesson, level, typeOfLesson, numberOfLesson = state.split()
                numberOfLesson = int(numberOfLesson)
                if numberOfLesson == -1:
                    numberOfLesson = 0
                state = f'{lesson} {level} {typeOfLesson} {numberOfLesson}'
                return {
                    'version': event['version'],
                    'session': event['session'],
                    'response': {
                        # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                        'text': videoLessons[lesson][level][numberOfLesson]['text'],
                        'buttons': keyboardNextLessonOrMenu,
                        "card": {
                            "type": "BigImage",
                            "image_id": videoLessons[lesson][level][numberOfLesson]['image_id'],
                            "description": videoLessons[lesson][level][numberOfLesson]['text'],
                            "title": 'Нажми на картинку для перехода к видео',
                            "button": {
                                "url": videoLessons[lesson][level][numberOfLesson]['url'],
                                "payload": {}
                            }
                        },
                        # Don't finish the session after this response.
                        'end_session': 'false'
                    
                    },
                    "user_state_update": {
                        "value": state
                    }
                }
                
            elif splitedState[2] == 'text':
                lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = state.split()
                numberOfLesson = int(numberOfLesson)
                numberOfDialog = int(numberOfDialog)
                if numberOfLesson == -1:
                    numberOfLesson = 0
                state = f'{lesson} {level} {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                keyboard = keyboardNext
                if numberOfDialog == len(textLessons[lesson][level][numberOfLesson]) - 1:
                    keyboard = keyboardNextLessonOrMenu
                return {
                    'version': event['version'],
                    'session': event['session'],
                    'response': {
                        # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                        'text': textLessons[lesson][level][numberOfLesson][numberOfDialog]['text'],
                        'tts': textLessons[lesson][level][numberOfLesson][numberOfDialog]['tts'],
                        'buttons': keyboard,
                        # Don't finish the session after this response.
                        'end_session': 'false'
                    
                    },
                    "user_state_update": {
                        "value": state
                    }
                }
                
    elif (payload == 'buttonNext' or 'дал' in usertext or 'продол' in usertext or 'ага' in usertext or 'ок' in usertext) and (state.__class__ != int) and len(state.split()) == 5:
        lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = state.split()
        numberOfLesson = int(numberOfLesson)
        numberOfDialog = int(numberOfDialog) + 1
        keyboard = keyboardNext
        if numberOfDialog == len(textLessons[lesson][level][numberOfLesson]) - 1:
            keyboard = keyboardNextLessonOrMenu
        if numberOfDialog == len(textLessons[lesson][level][numberOfLesson]):
            stateSplitted = state.split()
            if stateSplitted [2] == 'video':
                lesson, level, typeOfLesson, numberOfLesson = state.split()
                if numberOfLesson == '2':
                    if 'high' not in state:
                        if 'easy' in state:
                            state = f'{stateSplitted[0]} medium {stateSplitted[2]} -1'
                        elif 'medium' in state:
                            state = f'{stateSplitted[0]} high {stateSplitted[2]} -1'
                        return {
                            'version': event['version'],
                            'session': event['session'],
                            'response': {
                                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                                'text': 'Молодец! А тепеть давай посложнее',
                                'buttons': keyboardNextLessonOrMenu,
                                # Don't finish the session after this response.
                                'end_session': 'false'
                            },
                            "user_state_update": {
                                "value": state
                            }
                        }
                    else:
                        return {
                            'version': event['version'],
                            'session': event['session'],
                            'response': {
                                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                                'text': 'Умничка! Ты прошёл весь курс',
                                'buttons': keyboardMenu,
                                # Don't finish the session after this response.
                                'end_session': 'false'
                            },
                            "user_state_update": {
                                "value": 3
                            }
                        }

                lesson, level, typeOfLesson, numberOfLesson = state.split()
                numberOfLesson = int(numberOfLesson) + 1
                state = f'{lesson} {level} {typeOfLesson} {numberOfLesson}'

                #                                 номер урока
                #text = (описание урока, ссылка на видео)
                return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': videoLessons[lesson][level][numberOfLesson]['text'],
                            'buttons': keyboardNextLessonOrMenu,
                            "card": {
                                "type": "BigImage",
                                "image_id": videoLessons[lesson][level][numberOfLesson]['image_id'],
                                "description": videoLessons[lesson][level][numberOfLesson]['text'],
                                "title": 'Нажми на картинку для перехода к видео',
                                "button": {
                                    "url": videoLessons[lesson][level][numberOfLesson]['url'],
                                    "payload": {}
                                }
                            },
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        
                        },
                        "user_state_update": {
                            "value": state
                        }
                    }
            elif stateSplitted[2] == 'text': 
                lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = state.split()
                numberOfDialog = int(numberOfDialog)
                numberOfLesson = int(numberOfLesson)
                numberOfLesson += 1
                numberOfDialog = 0
                if numberOfLesson == len(textLessons[lesson][level]):
                    if 'high' not in state:
                        numberOfLesson = -1
                        if 'easy' in state:
                            state = f'{lesson} medium {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                        elif 'medium' in state:
                            state = f'{lesson} high {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                        return {
                            'version': event['version'],
                            'session': event['session'],
                            'response': {
                                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                                'text': 'Молодец! А тепеть давай посложнее',
                                'buttons': keyboardNextLessonOrMenu,
                                # Don't finish the session after this response.
                                'end_session': 'false'
                            },
                            "user_state_update": {
                                "value": state
                            }
                        }
                    else:
                        return {
                            'version': event['version'],
                            'session': event['session'],
                            'response': {
                                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                                'text': 'Умничка! Ты прошёл весь курс',
                                'buttons': keyboardMenu,
                                # Don't finish the session after this response.
                                'end_session': 'false'
                            },
                            "user_state_update": {
                                "value": 3
                            }
                        }
                else:
                    state = f'{lesson} {level} {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                    return {
                            'version': event['version'],
                            'session': event['session'],
                            'response': {
                                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                                'text': textLessons[lesson][level][numberOfLesson][numberOfDialog]['text'],
                                'tts': textLessons[lesson][level][numberOfLesson][numberOfDialog]['tts'],
                                'buttons': keyboardNext,
                                # Don't finish the session after this response.
                                'end_session': 'false'
                            
                            },
                            "user_state_update": {
                                "value": state
                            }
                    }
        else:
            state = f'{lesson} {level} {typeOfLesson} {numberOfLesson} {numberOfDialog}'
            return {
                    'version': event['version'],
                    'session': event['session'],
                    'response': {
                        # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                        'text': textLessons[lesson][level][numberOfLesson][numberOfDialog]['text'],
                        'tts': textLessons[lesson][level][numberOfLesson][numberOfDialog]['tts'],
                        'buttons': keyboard,
                        # Don't finish the session after this response.
                        'end_session': 'false'
                    
                    },
                    "user_state_update": {
                        "value": state
                    }
            }
        
    elif payload == 'buttonNextLesson' or 'след' in usertext or 'урок' in usertext:
        stateSplitted = state.split()
        if stateSplitted [2] == 'video':
            lesson, level, typeOfLesson, numberOfLesson = state.split()
            if numberOfLesson == '2':
                if 'high' not in state:
                    if 'easy' in state:
                        state = f'{stateSplitted[0]} medium {stateSplitted[2]} -1'
                    elif 'medium' in state:
                        state = f'{stateSplitted[0]} high {stateSplitted[2]} -1'
                    return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': 'Молодец! А тепеть давай посложнее',
                            'buttons': keyboardNextLessonOrMenu,
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        },
                        "user_state_update": {
                            "value": state
                        }
                    }
                else:
                    return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': 'Умничка! Ты прошёл весь курс',
                            'buttons': keyboardMenu,
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        },
                        "user_state_update": {
                            "value": 3
                        }
                    }

            lesson, level, typeOfLesson, numberOfLesson = state.split()
            numberOfLesson = int(numberOfLesson) + 1
            state = f'{lesson} {level} {typeOfLesson} {numberOfLesson}'

            #                                 номер урока
            #text = (описание урока, ссылка на видео)
            return {
                    'version': event['version'],
                    'session': event['session'],
                    'response': {
                        # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                        'text': videoLessons[lesson][level][numberOfLesson]['text'],
                        'buttons': keyboardNextLessonOrMenu,
                        "card": {
                            "type": "BigImage",
                            "image_id": videoLessons[lesson][level][numberOfLesson]['image_id'],
                            "description": videoLessons[lesson][level][numberOfLesson]['text'],
                            "title": 'Нажми на картинку для перехода к видео',
                            "button": {
                                "url": videoLessons[lesson][level][numberOfLesson]['url'],
                                "payload": {}
                            }
                        },
                        # Don't finish the session after this response.
                        'end_session': 'false'
                    
                    },
                    "user_state_update": {
                        "value": state
                    }
                }
        elif stateSplitted[2] == 'text': 
            lesson, level, typeOfLesson, numberOfLesson, numberOfDialog = state.split()
            numberOfDialog = int(numberOfDialog)
            numberOfLesson = int(numberOfLesson)
            numberOfLesson += 1
            numberOfDialog = 0
            if numberOfLesson == len(textLessons[lesson][level]):
                if 'high' not in state:
                    numberOfLesson = -1
                    if 'easy' in state:
                        state = f'{lesson} medium {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                    elif 'medium' in state:
                        state = f'{lesson} high {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                    return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': 'Молодец! А тепеть давай посложнее',
                            'buttons': keyboardNextLessonOrMenu,
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        },
                        "user_state_update": {
                            "value": state
                        }
                    }
                else:
                    return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': 'Умничка! Ты прошёл весь курс',
                            'buttons': keyboardMenu,
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        },
                        "user_state_update": {
                            "value": 3
                        }
                    }
            else:
                state = f'{lesson} {level} {typeOfLesson} {numberOfLesson} {numberOfDialog}'
                return {
                        'version': event['version'],
                        'session': event['session'],
                        'response': {
                            # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                            'text': textLessons[lesson][level][numberOfLesson][numberOfDialog]['text'],
                            'tts': textLessons[lesson][level][numberOfLesson][numberOfDialog]['tts'],
                            'buttons': keyboardNext,
                            # Don't finish the session after this response.
                            'end_session': 'false'
                        
                        },
                        "user_state_update": {
                            "value": state
                        }
                }
    
                
    if bool(event['session']['new']) is True:
        keyboard = keyboardMenu
        if 'снова' in jointext:
            if state.__class__ != int:
                if 'video' in state or 'text' in state:
                    if 'easy' in state or 'medium' in state or 'high' in state:
                        jointext += '\nХотите ли вы продолжить свой последний урок?'
                        keyboard = keyboardLessonContinue
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': jointext,
                'buttons': keyboard,
                # Don't finish the session after this response.
                
                'end_session': 'false'
            }
        }
    else:
        text = choice(['Ой! Кажется, непонятно. Попробуйте ещё раз',
                    'Я вас не понял. Пожалуйста, попробуйте ещё',
                    'Упс.. Кажется я вас не понял. Попробуйте снова.',
                    'Не совсем понял что вы имеете ввиду, попробуйте воспользоваться кнопками пожалуйста)',
                    'Что-то непонятно. Может попробуете перефразировать?',
                    'Непонятно. Пожалуйста, повторите',
                    'Я не понимаю что вы мне имеете ввиду. Чтобы узнать, что я умею, вы можете сказать «Что ты умеешь», а если у вас есть какие-то вопросы, то скажите: «Помощь»',
                    'Извините, мне не совсем понятна ваша команда, воспользуйтесь пожалуста кнопками иили попробуйте перефразировать',
                    'Попробуйте воспользоваться кнопками или же обратитесь за промощью командой «Помощь»'])
        return {
            'version': event['version'],
            'session': event['session'],
            'response': {
                # Respond with the original request or welcome the user if this is the beginning of the dialog and the request has not yet been made.
                'text': text,
                #'buttons': keyboardMenu,
                # Don't finish the session after this response.
                
                'end_session': 'false'
            }
        }